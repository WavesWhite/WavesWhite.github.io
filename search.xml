<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[SpringBoot-MyBatis-Plus（Service的CRUD接口操作：增删改操作）]]></title>
      <url>/articles/SpringBoot-MyBatis-Plus%EF%BC%88Service%E7%9A%84CRUD%E6%8E%A5%E5%8F%A3%E6%93%8D%E4%BD%9C%EF%BC%9A%E5%A2%9E%E5%88%A0%E6%94%B9%E6%93%8D%E4%BD%9C%EF%BC%89/</url>
      <content type="html"><![CDATA[<!-- <font size=4></font> -->
<h1 id="准备工作">准备工作</h1>
<h2 id="数据表设计">数据表设计</h2>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">SQLyog Ultimate v10.00 Beta1</span></span><br><span class="line"><span class="comment">MySQL - 8.0.30 </span></span><br><span class="line"><span class="comment">*********************************************************************</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*!40101 SET NAMES utf8 */</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `<span class="keyword">user</span>` (</span><br><span class="line">	`id` <span class="type">bigint</span> ,</span><br><span class="line">	`username` <span class="type">varchar</span> ,</span><br><span class="line">	`password` <span class="type">varchar</span> ,</span><br><span class="line">	`age` <span class="type">varchar</span> ,</span><br><span class="line">	`create_by` <span class="type">bigint</span> ,</span><br><span class="line">	`create_time` datetime ,</span><br><span class="line">	`update_by` <span class="type">bigint</span> ,</span><br><span class="line">	`update_time` datetime ,</span><br><span class="line">	`del_flag` <span class="type">int</span> </span><br><span class="line">); </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `<span class="keyword">user</span>` (`id`, `username`, `password`, `age`, `create_by`, `create_time`, `update_by`, `update_time`, `del_flag`) <span class="keyword">values</span>(<span class="string">&#x27;18&#x27;</span>,<span class="string">&#x27;username_1&#x27;</span>,<span class="string">&#x27;password_1&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 20:45:21&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 20:45:21&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `<span class="keyword">user</span>` (`id`, `username`, `password`, `age`, `create_by`, `create_time`, `update_by`, `update_time`, `del_flag`) <span class="keyword">values</span>(<span class="string">&#x27;19&#x27;</span>,<span class="string">&#x27;username_2&#x27;</span>,<span class="string">&#x27;test_password&#x27;</span>,<span class="string">&#x27;123321&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 20:45:21&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 21:56:19&#x27;</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `<span class="keyword">user</span>` (`id`, `username`, `password`, `age`, `create_by`, `create_time`, `update_by`, `update_time`, `del_flag`) <span class="keyword">values</span>(<span class="string">&#x27;20&#x27;</span>,<span class="string">&#x27;username_3&#x27;</span>,<span class="string">&#x27;password_3&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 20:45:21&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 20:45:21&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `<span class="keyword">user</span>` (`id`, `username`, `password`, `age`, `create_by`, `create_time`, `update_by`, `update_time`, `del_flag`) <span class="keyword">values</span>(<span class="string">&#x27;21&#x27;</span>,<span class="string">&#x27;username_1&#x27;</span>,<span class="string">&#x27;password_1&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 20:45:29&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 20:45:29&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `<span class="keyword">user</span>` (`id`, `username`, `password`, `age`, `create_by`, `create_time`, `update_by`, `update_time`, `del_flag`) <span class="keyword">values</span>(<span class="string">&#x27;22&#x27;</span>,<span class="string">&#x27;username_2&#x27;</span>,<span class="string">&#x27;test_password&#x27;</span>,<span class="string">&#x27;123321&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 20:45:29&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 21:56:19&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `<span class="keyword">user</span>` (`id`, `username`, `password`, `age`, `create_by`, `create_time`, `update_by`, `update_time`, `del_flag`) <span class="keyword">values</span>(<span class="string">&#x27;23&#x27;</span>,<span class="string">&#x27;77777&#x27;</span>,<span class="string">&#x27;888888888&#x27;</span>,<span class="string">&#x27;99999&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 20:45:29&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 20:50:51&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `<span class="keyword">user</span>` (`id`, `username`, `password`, `age`, `create_by`, `create_time`, `update_by`, `update_time`, `del_flag`) <span class="keyword">values</span>(<span class="string">&#x27;24&#x27;</span>,<span class="string">&#x27;username_1&#x27;</span>,<span class="string">&#x27;password_1&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 20:45:38&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 20:45:38&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `<span class="keyword">user</span>` (`id`, `username`, `password`, `age`, `create_by`, `create_time`, `update_by`, `update_time`, `del_flag`) <span class="keyword">values</span>(<span class="string">&#x27;25&#x27;</span>,<span class="string">&#x27;77777&#x27;</span>,<span class="string">&#x27;888888888&#x27;</span>,<span class="string">&#x27;99999&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 20:45:38&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 22:10:37&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `<span class="keyword">user</span>` (`id`, `username`, `password`, `age`, `create_by`, `create_time`, `update_by`, `update_time`, `del_flag`) <span class="keyword">values</span>(<span class="string">&#x27;26&#x27;</span>,<span class="string">&#x27;username_3&#x27;</span>,<span class="string">&#x27;password_3&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 20:45:38&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 20:45:38&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `<span class="keyword">user</span>` (`id`, `username`, `password`, `age`, `create_by`, `create_time`, `update_by`, `update_time`, `del_flag`) <span class="keyword">values</span>(<span class="string">&#x27;27&#x27;</span>,<span class="string">&#x27;aaaaaaaaaa&#x27;</span>,<span class="string">&#x27;bbbbbbbbbbbbbbbb&#x27;</span>,<span class="string">&#x27;1111111&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 20:45:48&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 21:01:00&#x27;</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `<span class="keyword">user</span>` (`id`, `username`, `password`, `age`, `create_by`, `create_time`, `update_by`, `update_time`, `del_flag`) <span class="keyword">values</span>(<span class="string">&#x27;28&#x27;</span>,<span class="string">&#x27;wwwwwwwwwwwwww&#x27;</span>,<span class="string">&#x27;ddddddddddddddddd&#x27;</span>,<span class="string">&#x27;333333&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 20:45:48&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 21:01:00&#x27;</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `<span class="keyword">user</span>` (`id`, `username`, `password`, `age`, `create_by`, `create_time`, `update_by`, `update_time`, `del_flag`) <span class="keyword">values</span>(<span class="string">&#x27;29&#x27;</span>,<span class="string">&#x27;username_3&#x27;</span>,<span class="string">&#x27;password_3&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 20:45:48&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 20:45:48&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `<span class="keyword">user</span>` (`id`, `username`, `password`, `age`, `create_by`, `create_time`, `update_by`, `update_time`, `del_flag`) <span class="keyword">values</span>(<span class="string">&#x27;30&#x27;</span>,<span class="string">&#x27;username_1&#x27;</span>,<span class="string">&#x27;password_1&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 20:45:56&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 20:45:56&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `<span class="keyword">user</span>` (`id`, `username`, `password`, `age`, `create_by`, `create_time`, `update_by`, `update_time`, `del_flag`) <span class="keyword">values</span>(<span class="string">&#x27;31&#x27;</span>,<span class="string">&#x27;username_2&#x27;</span>,<span class="string">&#x27;test_password&#x27;</span>,<span class="string">&#x27;123321&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 20:45:56&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 21:56:19&#x27;</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `<span class="keyword">user</span>` (`id`, `username`, `password`, `age`, `create_by`, `create_time`, `update_by`, `update_time`, `del_flag`) <span class="keyword">values</span>(<span class="string">&#x27;32&#x27;</span>,<span class="string">&#x27;username_3&#x27;</span>,<span class="string">&#x27;password_3&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 20:45:56&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 20:45:56&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `<span class="keyword">user</span>` (`id`, `username`, `password`, `age`, `create_by`, `create_time`, `update_by`, `update_time`, `del_flag`) <span class="keyword">values</span>(<span class="string">&#x27;33&#x27;</span>,<span class="string">&#x27;username_1&#x27;</span>,<span class="string">&#x27;password_1&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 20:46:05&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 20:46:05&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `<span class="keyword">user</span>` (`id`, `username`, `password`, `age`, `create_by`, `create_time`, `update_by`, `update_time`, `del_flag`) <span class="keyword">values</span>(<span class="string">&#x27;34&#x27;</span>,<span class="string">&#x27;username_2&#x27;</span>,<span class="string">&#x27;test_password&#x27;</span>,<span class="string">&#x27;123321&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 20:46:05&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 21:56:19&#x27;</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `<span class="keyword">user</span>` (`id`, `username`, `password`, `age`, `create_by`, `create_time`, `update_by`, `update_time`, `del_flag`) <span class="keyword">values</span>(<span class="string">&#x27;35&#x27;</span>,<span class="string">&#x27;username_3&#x27;</span>,<span class="string">&#x27;password_3&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 20:46:05&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 20:46:05&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `<span class="keyword">user</span>` (`id`, `username`, `password`, `age`, `create_by`, `create_time`, `update_by`, `update_time`, `del_flag`) <span class="keyword">values</span>(<span class="string">&#x27;36&#x27;</span>,<span class="string">&#x27;username_1&#x27;</span>,<span class="string">&#x27;password_1&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 20:46:13&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 20:46:13&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `<span class="keyword">user</span>` (`id`, `username`, `password`, `age`, `create_by`, `create_time`, `update_by`, `update_time`, `del_flag`) <span class="keyword">values</span>(<span class="string">&#x27;37&#x27;</span>,<span class="string">&#x27;username_2&#x27;</span>,<span class="string">&#x27;test_password&#x27;</span>,<span class="string">&#x27;123321&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 20:46:13&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 21:56:19&#x27;</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `<span class="keyword">user</span>` (`id`, `username`, `password`, `age`, `create_by`, `create_time`, `update_by`, `update_time`, `del_flag`) <span class="keyword">values</span>(<span class="string">&#x27;38&#x27;</span>,<span class="string">&#x27;username_3&#x27;</span>,<span class="string">&#x27;password_3&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 20:46:13&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 20:46:13&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `<span class="keyword">user</span>` (`id`, `username`, `password`, `age`, `create_by`, `create_time`, `update_by`, `update_time`, `del_flag`) <span class="keyword">values</span>(<span class="string">&#x27;39&#x27;</span>,<span class="string">&#x27;77777&#x27;</span>,<span class="string">&#x27;888888888&#x27;</span>,<span class="string">&#x27;99999&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 22:07:20&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 22:07:20&#x27;</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `<span class="keyword">user</span>` (`id`, `username`, `password`, `age`, `create_by`, `create_time`, `update_by`, `update_time`, `del_flag`) <span class="keyword">values</span>(<span class="string">&#x27;40&#x27;</span>,<span class="string">&#x27;123321123321&#x27;</span>,<span class="string">&#x27;888888888&#x27;</span>,<span class="string">&#x27;99999&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 22:09:41&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 22:09:41&#x27;</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `<span class="keyword">user</span>` (`id`, `username`, `password`, `age`, `create_by`, `create_time`, `update_by`, `update_time`, `del_flag`) <span class="keyword">values</span>(<span class="string">&#x27;41&#x27;</span>,<span class="string">&#x27;77777&#x27;</span>,<span class="string">&#x27;888888888&#x27;</span>,<span class="string">&#x27;99999&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 22:10:01&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 22:10:01&#x27;</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `<span class="keyword">user</span>` (`id`, `username`, `password`, `age`, `create_by`, `create_time`, `update_by`, `update_time`, `del_flag`) <span class="keyword">values</span>(<span class="string">&#x27;42&#x27;</span>,<span class="string">&#x27;aaaaaaaaaa&#x27;</span>,<span class="string">&#x27;bbbbbbbbbbbbbbbb&#x27;</span>,<span class="string">&#x27;1111111&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 22:10:37&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 22:10:37&#x27;</span>,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `<span class="keyword">user</span>` (`id`, `username`, `password`, `age`, `create_by`, `create_time`, `update_by`, `update_time`, `del_flag`) <span class="keyword">values</span>(<span class="string">&#x27;43&#x27;</span>,<span class="string">&#x27;wwwwwwwwwwwwww&#x27;</span>,<span class="string">&#x27;ddddddddddddddddd&#x27;</span>,<span class="string">&#x27;333333&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 22:10:37&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;2022-11-13 22:10:37&#x27;</span>,<span class="string">&#x27;0&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p><img src="/.com//../../img/posts_img/SpringBoot-MyBatis-Plus（Service的CRUD接口操作：增删改操作）/2022-11-14-20-52-52.png"></p>
<h2 id="导入依赖">导入依赖</h2>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--springboot 启动类依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--springboot 测试类依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--springboot Web开发依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--MySql数据库依赖--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入了mysql依赖后需要连接数据库</span></span><br><span class="line"><span class="comment">    在application.yaml配置文件中配置连入数据库 的参数，url：跟自己数据库的地址，数据库、username和password填上自己数据库的名字和密码即可连接--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Mybatis-Plus依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Lombok依赖--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入lombok依赖后还需要进行一步操作，下载lombok插件，方法：点击File—&gt;Setting—&gt;Plugins</span></span><br><span class="line"><span class="comment">    然后再搜索框搜索Lombok，安装插件即可--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="application.yml项目配置">application.yml项目配置</h2>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 数据库配置</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis-plus-crud-test?characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">数据库用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">数据库密码</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment"># mybatis-plus日志 控制台输出</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="comment"># 逻辑删除</span></span><br><span class="line">      <span class="attr">logic-delete-field:</span> <span class="string">delFlag</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span></span><br><span class="line">      <span class="comment"># id生成规则：数据库id自增</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="entity实体类">entity实体类</h2>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@TableName(&quot;user&quot;)</span>  <span class="comment">// 标识表名</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>  &#123;</span><br><span class="line">    <span class="meta">@TableId</span> <span class="comment">// 标识主键ID</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="comment">//密码</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">//年龄</span></span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="comment">//创建人的用户ID</span></span><br><span class="line">    <span class="keyword">private</span> Long createBy;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="comment">//创建时间</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="comment">//更新人的用户ID</span></span><br><span class="line">    <span class="keyword">private</span> Long updateBy;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="comment">//更新时间</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除标志（0代表未删除，1代表已删除）</span></span><br><span class="line">    <span class="meta">@TableLogic</span> <span class="comment">// 逻辑删除 注释</span></span><br><span class="line">    <span class="keyword">private</span> Integer delFlag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="mapper">mapper</h2>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="service">service</h2>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="serviceimpl">serviceimpl</h2>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="mp字段自动填充">MP字段自动填充</h2>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置MP字段自动填充：实现 MetaObjectHandler 接口，重写相应方法即刻</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 如需实现字段自动填充，请给需要填充的字段添加注解，例：<span class="doctag">@TableField</span>(fill = FieldFill.INSERT_UPDATE) 、 <span class="doctag">@TableField</span>(fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123; <span class="comment">// 配置MP字段自动填充：实现 MetaObjectHandler 接口，重写相应方法即刻</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增数据自动填充方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metaObject</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;进入MP自动填充 新增数据&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;createBy&quot;</span>, (<span class="type">long</span>)<span class="number">3</span>, metaObject);</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;createTime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), metaObject);</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;updateBy&quot;</span>, (<span class="type">long</span>)<span class="number">3</span>, metaObject);</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), metaObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新数据自动填充方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metaObject</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;进入MP自动填充 更新数据&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;updateBy&quot;</span>, (longzi)<span class="number">3</span>, metaObject);</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), metaObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="文件目录结构">文件目录结构</h2>
<p><img src="/.com//../../img/posts_img/SpringBoot-MyBatis-Plus（Service的CRUD接口操作：增删改操作）/2022-11-14-20-58-09.png"></p>
<h1 id="service的crud接口操作代码实现增删改操作">Service的CRUD接口操作（代码实现）：增删改操作</h1>
<p><font size="4"> </font></p>
<h2 id="save新增数据">save新增数据</h2>
<ul>
<li><font size="4">save方法
可以将一个实体对象插入到对应的数据表中：（插入成功后，当前插入对象在数据库中的
id 会写回到该实体中）</font> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user1.setUsername(<span class="string">&quot;username_1&quot;</span>);</span><br><span class="line">user1.setPassword(<span class="string">&quot;password_1&quot;</span>);</span><br><span class="line">user1.setAge(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">userService.save(user1);              <span class="comment">// 新增单个数据</span></span><br></pre></td></tr></table></figure></li>
<li><font size="4">saveBatch 方法可以批量插入数据：</font>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user1.setUsername(<span class="string">&quot;username_1&quot;</span>);</span><br><span class="line">user1.setPassword(<span class="string">&quot;password_1&quot;</span>);</span><br><span class="line">user1.setAge(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user2.setUsername(<span class="string">&quot;username_2&quot;</span>);</span><br><span class="line">user2.setPassword(<span class="string">&quot;password_2&quot;</span>);</span><br><span class="line">user2.setAge(<span class="string">&quot;2&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user3.setUsername(<span class="string">&quot;username_3&quot;</span>);</span><br><span class="line">user3.setPassword(<span class="string">&quot;password_3&quot;</span>);</span><br><span class="line">user3.setAge(<span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line">List&lt;User&gt; userList = Arrays.asList(user1, user2, user3);</span><br><span class="line"></span><br><span class="line">userService.saveBatch(userList);      <span class="comment">// 批量新增数据</span></span><br></pre></td></tr></table></figure></li>
<li><font size="4">saveBatch 方法还可以设置每个批次的插入数量：</font>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user1.setUsername(<span class="string">&quot;username_1&quot;</span>);</span><br><span class="line">user1.setPassword(<span class="string">&quot;password_1&quot;</span>);</span><br><span class="line">user1.setAge(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user2.setUsername(<span class="string">&quot;username_2&quot;</span>);</span><br><span class="line">user2.setPassword(<span class="string">&quot;password_2&quot;</span>);</span><br><span class="line">user2.setAge(<span class="string">&quot;2&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user3.setUsername(<span class="string">&quot;username_3&quot;</span>);</span><br><span class="line">user3.setPassword(<span class="string">&quot;password_3&quot;</span>);</span><br><span class="line">user3.setAge(<span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line">List&lt;User&gt; userList = Arrays.asList(user1, user2, user3);</span><br><span class="line"></span><br><span class="line">userService.saveBatch(userList, <span class="number">2</span>);   <span class="comment">// 批量新增数据（每批2条数据）</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="update修改数据">update修改数据</h2>
<ul>
<li><font size="4">updateById 方法根据实体对象中的 ID
进行修改：（如果实体对象中某个属性为
null，不会更新该属性（即不会把对应的数据库字段值设置为null））</font>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user1.setUsername(<span class="string">&quot;77777&quot;</span>);</span><br><span class="line">user1.setPassword(<span class="string">&quot;888888888&quot;</span>);</span><br><span class="line">user1.setAge(<span class="string">&quot;99999&quot;</span>);</span><br><span class="line">user1.setId((<span class="type">long</span>)<span class="number">25</span>);</span><br><span class="line"></span><br><span class="line">userService.updateById(user1);                <span class="comment">// 根据ID修改单个数据</span></span><br></pre></td></tr></table></figure></li>
<li><font size="4">updateBatchById 方法根据实体对象中的 ID
进行批量修改：</font> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user1.setUsername(<span class="string">&quot;77777&quot;</span>);</span><br><span class="line">user1.setPassword(<span class="string">&quot;888888888&quot;</span>);</span><br><span class="line">user1.setAge(<span class="string">&quot;99999&quot;</span>);</span><br><span class="line">user1.setId((<span class="type">long</span>)<span class="number">25</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user2.setUsername(<span class="string">&quot;aaaaaaaaaa&quot;</span>);</span><br><span class="line">user2.setPassword(<span class="string">&quot;bbbbbbbbbbbbbbbb&quot;</span>);</span><br><span class="line">user2.setAge(<span class="string">&quot;1111111&quot;</span>);</span><br><span class="line">user2.setId((<span class="type">long</span>)<span class="number">27</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user3.setUsername(<span class="string">&quot;wwwwwwwwwwwwww&quot;</span>);</span><br><span class="line">user3.setPassword(<span class="string">&quot;ddddddddddddddddd&quot;</span>);</span><br><span class="line">user3.setAge(<span class="string">&quot;333333&quot;</span>);</span><br><span class="line">user3.setId((<span class="type">long</span>)<span class="number">28</span>);</span><br><span class="line"></span><br><span class="line">List&lt;User&gt; userList = Arrays.asList(user1, user2, user3);</span><br><span class="line"></span><br><span class="line">userService.updateBatchById(userList);        <span class="comment">// 根据ID批量修改数据</span></span><br></pre></td></tr></table></figure></li>
<li><font size="4">updateBatchById
方法还可以设置每个批次的修改的数量：</font> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user1.setUsername(<span class="string">&quot;77777&quot;</span>);</span><br><span class="line">user1.setPassword(<span class="string">&quot;888888888&quot;</span>);</span><br><span class="line">user1.setAge(<span class="string">&quot;99999&quot;</span>);</span><br><span class="line">user1.setId((<span class="type">long</span>)<span class="number">25</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user2.setUsername(<span class="string">&quot;aaaaaaaaaa&quot;</span>);</span><br><span class="line">user2.setPassword(<span class="string">&quot;bbbbbbbbbbbbbbbb&quot;</span>);</span><br><span class="line">user2.setAge(<span class="string">&quot;1111111&quot;</span>);</span><br><span class="line">user2.setId((<span class="type">long</span>)<span class="number">27</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user3.setUsername(<span class="string">&quot;wwwwwwwwwwwwww&quot;</span>);</span><br><span class="line">user3.setPassword(<span class="string">&quot;ddddddddddddddddd&quot;</span>);</span><br><span class="line">user3.setAge(<span class="string">&quot;333333&quot;</span>);</span><br><span class="line">user3.setId((<span class="type">long</span>)<span class="number">28</span>);</span><br><span class="line"></span><br><span class="line">List&lt;User&gt; userList = Arrays.asList(user1, user2, user3);</span><br><span class="line"></span><br><span class="line">userService.updateBatchById(userList, <span class="number">2</span>);     <span class="comment">// 根据ID批量更新数据（每批2条数据）</span></span><br></pre></td></tr></table></figure></li>
<li><font size="4">update
方法可以使用实体对象封装操作类进行更新操作：</font> <figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">数据更新相关的构造器（UpdateWrapper、LambdaUpdateWrapper、LambdaUpdateChainWrapper）使用方法类似于查询构造器（QueryWrapper、LambdaQueryWrapper、LambdaQueryChainWrapper），不同的是它增加了如下两个方法：</span><br><span class="line">    set：设置数据库字段值</span><br><span class="line">    setSql：设置 set 部分的 sql</span><br></pre></td></tr></table></figure>
<ul>
<li><font size="4">我们也可以通过 updateWrapper 的 set
方法直接设置字段值</font> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询条件：名字中包含 &quot;2&quot; 并且 Age小于123322</span></span><br><span class="line"><span class="comment">// 将符合条件的查询结果的password设置为：&quot;test_password&quot;, Age设置为： &quot;123321&quot;</span></span><br><span class="line">LambdaUpdateWrapper&lt;User&gt; userLambdaQueryWrapper1 = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">userLambdaQueryWrapper1.like(User::getUsername, <span class="string">&quot;2&quot;</span>).lt(User::getAge, <span class="number">123322</span>)</span><br><span class="line">        .set(User::getPassword,<span class="string">&quot;test_password&quot;</span>)</span><br><span class="line">        .set(User::getAge, <span class="string">&quot;123321&quot;</span>);</span><br><span class="line"><span class="comment">// 开始修改</span></span><br><span class="line"><span class="comment">// boolean isUpdata = userService.update(userLambdaQueryWrapper);  </span></span><br><span class="line"><span class="comment">// 注意坑：updata只传入Wrapper条件时，不触发MybatisPlus的自动填充字段方法。使用下面带有实体类的传参重载方法便可解决</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isUpdata</span> <span class="operator">=</span> userService.update(user3, userLambdaQueryWrapper);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*********** 二者可以结合使用的，下面效果等效于上面的 ****************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询条件：名字中包含 &quot;2&quot; 并且 Age小于3</span></span><br><span class="line"><span class="comment">// 将符合条件的查询结果的password设置为：&quot;test_password&quot;, Age设置为： &quot;123321&quot;</span></span><br><span class="line">LambdaUpdateWrapper&lt;User&gt; userLambdaQueryWrapper2 = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">userLambdaQueryWrapper2.like(User::getUsername, <span class="string">&quot;2&quot;</span>).lt(User::getAge, <span class="number">123322</span>)</span><br><span class="line">        .set(User::getPassword,<span class="string">&quot;test_password&quot;</span>);</span><br><span class="line"><span class="type">User</span> <span class="variable">user4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user4.setAge(<span class="string">&quot;123321&quot;</span>);</span><br><span class="line"><span class="comment">// 开始修改</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isUpdata</span> <span class="operator">=</span> userService.update(user4, userLambdaQueryWrapper2);</span><br></pre></td></tr></table></figure></li>
<li><font size="4">也可以通过 updateWrapper 的 setSql 方法可以直接设置 set
部分的 sql，下面的效果同上面是一样的：</font> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询条件：名字中包含 &quot;2&quot; 并且 Age小于123322</span></span><br><span class="line"><span class="comment">// 将符合条件的查询结果的password设置为：&quot;test_password&quot;, Age设置为： &quot;123321&quot;</span></span><br><span class="line">LambdaUpdateWrapper&lt;User&gt; userLambdaQueryWrapper1 = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">userLambdaQueryWrapper1.like(User::getUsername, <span class="string">&quot;2&quot;</span>).lt(User::getAge, <span class="number">123322</span>)</span><br><span class="line">        .setSql(<span class="string">&quot;password = test_password&quot;</span>)</span><br><span class="line">        .setSql(<span class="string">&quot;age = 123321&quot;</span>);</span><br><span class="line"><span class="comment">// 开始修改</span></span><br><span class="line"><span class="comment">// boolean isUpdata = userService.update(userLambdaQueryWrapper);  </span></span><br><span class="line"><span class="comment">// 注意坑：updata只传入Wrapper条件时，不触发MybatisPlus的自动填充字段方法。使用下面带有实体类的传参重载方法便可解决</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isUpdata</span> <span class="operator">=</span> userService.update(user3, userLambdaQueryWrapper);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*********** 二者可以结合使用的，下面效果等效于上面的 ****************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询条件：名字中包含 &quot;2&quot; 并且 Age小于3</span></span><br><span class="line"><span class="comment">// 将符合条件的查询结果的password设置为：&quot;test_password&quot;, Age设置为： &quot;123321&quot;</span></span><br><span class="line">LambdaUpdateWrapper&lt;User&gt; userLambdaQueryWrapper2 = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">userLambdaQueryWrapper2.like(User::getUsername, <span class="string">&quot;2&quot;</span>).lt(User::getAge, <span class="number">123322</span>)</span><br><span class="line">        .setSql(<span class="string">&quot;password = test_password&quot;</span>);</span><br><span class="line"><span class="type">User</span> <span class="variable">user4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user4.setAge(<span class="string">&quot;123321&quot;</span>);</span><br><span class="line"><span class="comment">// 开始修改</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isUpdata</span> <span class="operator">=</span> userService.update(user4, userLambdaQueryWrapper2);</span><br></pre></td></tr></table></figure></li>
</ul></li>
</ul>
<h2 id="save-or-updata新增或修改数据">save or updata新增或修改数据</h2>
<ul>
<li><font size="4">saveOrUpdate 会先判断实体类是否包含主键
ID，如果有的话则执行更新操作，没有的话则执行新增操作：</font>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user1.setUsername(<span class="string">&quot;77777&quot;</span>);</span><br><span class="line">user1.setPassword(<span class="string">&quot;888888888&quot;</span>);</span><br><span class="line">user1.setAge(<span class="string">&quot;99999&quot;</span>);</span><br><span class="line">user1.setId((<span class="type">long</span>)<span class="number">25</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user2.setUsername(<span class="string">&quot;aaaaaaaaaa&quot;</span>);</span><br><span class="line">user2.setPassword(<span class="string">&quot;bbbbbbbbbbbbbbbb&quot;</span>);</span><br><span class="line">user2.setAge(<span class="string">&quot;1111111&quot;</span>);</span><br><span class="line">user2.setId((<span class="type">long</span>)<span class="number">27</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于 user1 设置了主键id，则执行更新操作</span></span><br><span class="line">userService.saveOrUpdate(user1);                <span class="comment">// 根据ID修改或者新增单个数据</span></span><br><span class="line"><span class="comment">// 由于user2没有设置主键id，则执行新增操作</span></span><br><span class="line">userService.saveOrUpdate(user2);                <span class="comment">// 根据ID修改或者新增单个数据</span></span><br></pre></td></tr></table></figure></li>
<li><font size="4">saveOrUpdateBatch
方法可以执行批量的新增或修改操作：</font> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user1.setUsername(<span class="string">&quot;77777&quot;</span>);</span><br><span class="line">user1.setPassword(<span class="string">&quot;888888888&quot;</span>);</span><br><span class="line">user1.setAge(<span class="string">&quot;99999&quot;</span>);</span><br><span class="line">user1.setId((<span class="type">long</span>)<span class="number">25</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user2.setUsername(<span class="string">&quot;aaaaaaaaaa&quot;</span>);</span><br><span class="line">user2.setPassword(<span class="string">&quot;bbbbbbbbbbbbbbbb&quot;</span>);</span><br><span class="line">user2.setAge(<span class="string">&quot;1111111&quot;</span>);</span><br><span class="line">user2.setId((<span class="type">long</span>)<span class="number">27</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user3.setUsername(<span class="string">&quot;wwwwwwwwwwwwww&quot;</span>);</span><br><span class="line">user3.setPassword(<span class="string">&quot;ddddddddddddddddd&quot;</span>);</span><br><span class="line">user3.setAge(<span class="string">&quot;333333&quot;</span>);</span><br><span class="line">user3.setId((<span class="type">long</span>)<span class="number">28</span>);</span><br><span class="line"></span><br><span class="line">List&lt;User&gt; userList = Arrays.asList(user1, user2, user3);</span><br><span class="line"></span><br><span class="line">userService.saveOrUpdateBatch(userList);        <span class="comment">// 根据ID批量修改或者新增数据</span></span><br></pre></td></tr></table></figure></li>
<li><font size="4">saveOrUpdate 会先判断实体类是否包含主键
ID，如果有的话则执行更新操作，没有的话则执行新增操作：</font>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user1.setUsername(<span class="string">&quot;77777&quot;</span>);</span><br><span class="line">user1.setPassword(<span class="string">&quot;888888888&quot;</span>);</span><br><span class="line">user1.setAge(<span class="string">&quot;99999&quot;</span>);</span><br><span class="line">user1.setId((<span class="type">long</span>)<span class="number">25</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user2.setUsername(<span class="string">&quot;aaaaaaaaaa&quot;</span>);</span><br><span class="line">user2.setPassword(<span class="string">&quot;bbbbbbbbbbbbbbbb&quot;</span>);</span><br><span class="line">user2.setAge(<span class="string">&quot;1111111&quot;</span>);</span><br><span class="line">user2.setId((<span class="type">long</span>)<span class="number">27</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user3.setUsername(<span class="string">&quot;wwwwwwwwwwwwww&quot;</span>);</span><br><span class="line">user3.setPassword(<span class="string">&quot;ddddddddddddddddd&quot;</span>);</span><br><span class="line">user3.setAge(<span class="string">&quot;333333&quot;</span>);</span><br><span class="line">user3.setId((<span class="type">long</span>)<span class="number">28</span>);</span><br><span class="line"></span><br><span class="line">List&lt;User&gt; userList = Arrays.asList(user1, user2, user3);</span><br><span class="line"></span><br><span class="line">userService.saveOrUpdateBatch(userList, <span class="number">2</span>);     <span class="comment">// 根据ID批量修改或者新增数据（每批2条数据）</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="remove删除数据">remove删除数据</h2>
<blockquote>
<p><font size="4">删除操作实际上是：将逻辑删除字段标识为 "1"
（1为已删除字段）</font></p>
</blockquote>
<ul>
<li><font size="4">removeById 方法可以根据 id 删除一条记录：</font>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">userService.removeById(<span class="number">18</span>); <span class="comment">// 根据ID删除单个数据</span></span><br><span class="line">userService.removeByIds(Arrays.asList(<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">25</span>));</span><br></pre></td></tr></table></figure></li>
<li><font size="4">removeByIds 方法根据 id 批量删除：</font>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userService.removeByIds(Arrays.asList(<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">25</span>)); <span class="comment">// 根据 id 批量删除数据</span></span><br></pre></td></tr></table></figure></li>
<li><font size="4">removeByMap 方法通过 Map 封装的条件删除记录：</font>
<figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注意：map 写的是数据表中的列名，而非实体类的属性名。比如属性名为 userName，数据表中字段为 user_name，这里应该写的是 user_name。</span><br></pre></td></tr></table></figure> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// map 写的是数据表中的列名，而非实体类的属性名。比如属性名为 userName，数据表中字段为 user_name，这里应该写的是 user_name</span></span><br><span class="line">Map&lt;String, Object&gt; columnMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">columnMap.put(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line">userService.removeByMap(columnMap);</span><br></pre></td></tr></table></figure></li>
<li><font size="4">remove 方法使用查询构造器，删除记录：</font>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询条件：名字中包含 &quot;1&quot;, 并且年龄小于2</span></span><br><span class="line">LambdaQueryWrapper&lt;User&gt; userLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">userLambdaQueryWrapper.like(User::getUsername, <span class="string">&quot;1&quot;</span>).lt(User::getAge, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// 返回删除结果</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isRemove</span> <span class="operator">=</span> userService.remove(userLambdaQueryWrapper);</span><br></pre></td></tr></table></figure></li>
</ul>
<p>参考链接</p>
<ul>
<li><a href="https://www.hangge.com/blog/cache/detail_2919.html">SpringBoot -
MyBatis-Plus使用详解11（Service的CRUD接口3：增删改操作）</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 杂七杂八 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> MyBatis-Plus </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot定时任务@EnableScheduling注解使用方法与cron表达式]]></title>
      <url>/articles/SpringBoot%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1@EnableScheduling%E6%B3%A8%E8%A7%A3%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E4%B8%8Ecron%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      <content type="html"><![CDATA[<!-- <font size=4></font> -->
<h1 id="前言">前言</h1>
<h2 id="定时任务的作用">定时任务的作用？</h2>
<p><font size="4">定时任务相当于闹钟，在什么时间做什么事情（执行什么命令/脚本）</font></p>
<h2 id="定时任务的实现">定时任务的实现？</h2>
<p><font size="4">定时任务的实现方式有很多，比如XXL-Job等。但是其实核心功能和概念都是类似的，很多情况下只是调用的API不同而已</font></p>
<p><font size="4">这里就先用SpringBoot为我们提供的定时任务API的@EnableScheduling注解来简单实现一下定时任务</font></p>
<h1 id="enablescheduling注解使用"><span class="citation" data-cites="EnableScheduling注解使用">@EnableScheduling注解使用</span></h1>
<h2 id="导入依赖">导入依赖</h2>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="启动类里面使用-enablescheduling-注解开启功能自动扫描">启动类里面使用
<span class="citation" data-cites="EnableScheduling">@EnableScheduling</span>
注解开启功能，自动扫描</h2>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableScheduling</span>   <span class="comment">// 开启定时任务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QiNiuTestApplication</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd / HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前时间：\t&quot;</span> + simpleDateFormat.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));    <span class="comment">// 输出当前时间</span></span><br><span class="line">        SpringApplication.run(QiNiuTestApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="定时任务测试方法">定时任务测试方法</h2>
<ul>
<li><font size="4">任务的类上写 <span class="citation" data-cites="Component">@Component</span></font></li>
<li><font size="4">任务方法上写 <span class="citation" data-cites="Scheduled">@Scheduled</span></font> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Component</span>  <span class="comment">// 注入容器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SchedulingTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始延迟10秒，每隔3秒</span></span><br><span class="line">    <span class="comment">// @Scheduled(fixedRate = 3000, initialDelay = 10000)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每次执行完延迟3秒</span></span><br><span class="line">    <span class="comment">// @Scheduled(fixedDelay = 3000)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每次隔3秒执行一次</span></span><br><span class="line">    <span class="comment">// @Scheduled(fixedRate = 3000)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从第0秒开始，每次隔5执行一次</span></span><br><span class="line">    <span class="comment">// @Scheduled(cron = &quot;0/5 * * * * ?&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每小时的第10分钟到20分钟内，每分钟执行一次1·</span></span><br><span class="line">    <span class="comment">// @Scheduled(cron = &quot;0 0-10 * * * ?&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每个月 每日 0点与8点的 0分与30分的 0秒 各执行一次</span></span><br><span class="line">    <span class="comment">// @Scheduled(cron = &quot;0 0,30 0,8 * * ?&quot;)</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    执行结果：</span></span><br><span class="line"><span class="comment">    2022-11-05 00:00:00</span></span><br><span class="line"><span class="comment">    2022-11-05 00:30:00</span></span><br><span class="line"><span class="comment">    2022-11-05 08:00:00</span></span><br><span class="line"><span class="comment">    2022-11-05 08:30:00</span></span><br><span class="line"><span class="comment">    2022-11-06 00:00:00</span></span><br><span class="line"><span class="comment">    2022-11-06 00:30:00</span></span><br><span class="line"><span class="comment">    2022-11-06 08:00:00</span></span><br><span class="line"><span class="comment">    2022-11-06 08:30:00</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每月1号凌晨2点执行一次</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0 0 0,2 1 * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd / HH:mm:ss&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;当前时间：\t&quot;</span> + simpleDateFormat.format(<span class="keyword">new</span> <span class="title class_">Date</span>()));    <span class="comment">// 打印 当前日期时间</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="定时任务的cron表达式">定时任务的cron表达式</h1>
<h2 id="cron表达式介绍">cron表达式介绍</h2>
<p><font size="4">cron = 0 0 2 * *
?，这个表达式的含义是：每天2点执行一次任务。</font></p>
<p><font size="4">cron表达式是一个字符串，以5或者6个空格隔开（上面示例是被5个空格隔开）</font></p>
<p><font size="4">字符串被切割成
<strong>6个或者7个域</strong>，每个域都代表不同的含义</font></p>
<p><font size="4">从左到右依次分为：秒、分、时、日、月、周几、年（其中年不是必须的，所以cron表达式有两种形式）</font></p>
<blockquote>
<p>{Seconds} {Minutes} {Hours} {DayofMonth} {Month} {DayofWeek}
{Year}</p>
</blockquote>
<p><font size="4">或者</font></p>
<blockquote>
<p>{Seconds} {Minutes} {Hours} {DayofMonth} {Month} {DayofWeek}</p>
</blockquote>
<ul>
<li><font size="4">各个域的含义:</font> <img src="https://pic1.zhimg.com/v2-86ff6b9d188ae417753a0825d4f19e0c_r.jpg"></li>
</ul>
<p><font size="4">每个域都可以用数字表示，但是还可以出现如下特殊字符:</font></p>
<ul>
<li><font size="4">* :
表示匹配该域的任意值。比如Minutes域使用*，就表示每分钟都会触发</font></li>
<li><font size="4">- : 表示范围。比如Minutes域使用
10-20，就表示从10分钟到20分钟每分钟都会触发一次</font></li>
<li><font size="4">, :
表示列出枚举值。比如Minutes域使用1,3，就表示1分钟和3分钟都会触发一次</font></li>
<li><font size="4">/ :
表示间隔时间触发(开始时间/时间间隔)。例如在Minutes域使用
5/10，就表示从第5分钟开始，每隔10分钟触发一次</font></li>
<li><font size="4">? :
表示不指定值。简单理解就是忽略该字段的值，直接根据另一个字段的值触发执行</font></li>
<li><font size="4"># :
表示该月第n个星期x(x#n)，仅用星期域。如：星期：6#3，表示该月的第三个星期五</font></li>
<li><font size="4">L :
表示最后，是单词"last"的缩写（最后一天或最后一个星期几）；仅出现在日和星期的域中。用在日则表示该月的最后一天，用在星期则表示该月的最后一个星期。如：星期域上的值为5L，则表示该月最后一个星期的星期四。在使用'L'时，不要指定列表','或范围'-'，否则易导致出现意料之外的结果</font></li>
<li><font size="4">W:
仅用在日的域中，表示距离当月给定日期最近的工作日（周一到周五），是单词"weekday"的缩写</font></li>
<li><font size="4"><strong>LW:
'L'和'W'可以一起组合在日字段使用。表示当月的最后一个工作日触发事件</strong></font></li>
</ul>
<p><font size="4">比如："4W"
表示距离4号最近的工作日（当月的）触发</font></p>
<ul>
<li><font size="4">当4号就是工作日时，则表示当天触发；当4号为周六时，则表示3号（周五）触发</font></li>
<li><font size="4">当4号为周日时，则表示在5号（周一）触发</font></li>
</ul>
<p><font size="4">比如："1W"
表示距离1号最近的工作日触发，但是，该工作日只算当月的</font></p>
<ul>
<li><font size="4">当月1号是周六，则"1W"表示在当月3号（周一）触发。就算上个月的最后一天是工作日，也不会触发</font></li>
</ul>
<h2 id="取值说明">取值说明</h2>
<ul>
<li><font size="4"><strong>DayofMonth：</strong></font>
<ul>
<li><font size="4">可以用数字1-31
中的任一个值，但要注意一些特别的月份</font></li>
</ul></li>
<li><font size="4"><strong>Month：</strong></font>
<ul>
<li><font size="4">一年中的月份，可以用 1-12 或用字符串 <strong>"JAN, FEB,
MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV and DEC"</strong>
表示</font></li>
</ul></li>
<li><font size="4"><strong>DayofWeek：</strong></font>
<ul>
<li><font size="4">表示星期几，可以用数字 1-7<strong>（1 =
星期日）</strong>，或者用字符串 <strong>"SUN, MON, TUE, WED, THU, FRI
and SAT"</strong> 来表示</font></li>
</ul></li>
</ul>
<h2 id="常用cron表达式">常用cron表达式</h2>
<ul>
<li><font size="4"> */10 * * * * ? 每隔10秒执行一次</font></li>
<li><font size="4"> 0 */5 * * * ? 每隔5分钟执行一次</font></li>
<li><font size="4"> 0 2,22,32 * * * ? 每小时的 2分，22分，32分
执行一次</font></li>
<li><font size="4"> 0 0 4-8 * * ? 每日的 4-8点
每小时<strong>整点</strong>执行一次</font></li>
<li><font size="4"> 0 0 2 * * ? 每日的 2点 执行一次</font></li>
<li><font size="4"> 0 0 2 1 * ? 每月 1号2点 执行一次</font></li>
</ul>
<h2 id="cron表达式生成器">cron表达式生成器</h2>
<ul>
<li><a href="https://www.bejson.com/othertools/cron/">Cron表达式生成器</a></li>
<li><a href="https://cron.qqe2.com/">在线Cron表达式生成器</a></li>
<li><a href="https://www.toolzl.com/tools/croncreate.html">Crontab表达式生成器</a></li>
</ul>
<p>参考链接</p>
<ul>
<li><a href="https://www.jianshu.com/p/9d18039c0f08">SpringBoot定时任务@EnableScheduling</a></li>
<li><a href="https://blog.csdn.net/sinat_32023305/article/details/81281282">Spring
<span class="citation" data-cites="EnableScheduling">@EnableScheduling</span> 注解解析</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/163050320">定时任务的cron表达式</a></li>
<li><a href="https://blog.csdn.net/f2315895270/article/details/104714692">XXL-JOB的使用(详细教程)</a></li>
<li><a href="https://developer.aliyun.com/article/775305?utm_content=g_1000191671#slide-0">3千字带你搞懂XXL-JOB任务调度平台</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 杂七杂八 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> EnableScheduling </tag>
            
            <tag> cron </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot-CommandLineRunner使用详解]]></title>
      <url>/articles/SpringBoot-CommandLineRunner%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h1 id="问题背景">问题背景</h1>
<p><font size="4">如果希望在SpringBoot应用启动时进行一些初始化操作，可以选择SpringBoot提供了一个简单的方式来实现此类需求：选择使用CommandLineRunner来进行处理</font></p>
<p><font size="4">只需要实现CommandLineRunner接口，并且把对应的bean注入容器。把相关初始化的代码重新到需要重新的方法中</font></p>
<p><font size="4">这样就会在应用启动的时候执行对应的代码</font></p>
<h1 id="代码实现">代码实现</h1>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>  <span class="comment">// 注入容器</span></span><br><span class="line"><span class="meta">@Order(value = 1)</span>   <span class="comment">// 如果存在多个CommandLineRunner组件方法，可以使用 @Order() 注解指定加载顺序，如果不指定value参数，默认为：2147483647</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCommandLineRunner</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;   <span class="comment">// 不能放在test目录中，要放在启动类的同级目录下</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * CommandLineRunner：</span></span><br><span class="line"><span class="comment">     * 这是一个接口，用户可以自定义实现该接口，具体实现run方法</span></span><br><span class="line"><span class="comment">     * 任何在上下文容器之内的bean都可以实现run方法</span></span><br><span class="line"><span class="comment">     * 如果在上下文中，存在多个该接口实现类，可以通过<span class="doctag">@order</span>注解，指定加载顺序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是一个测试CommandLineRunner的测试方法&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;程序初始化中......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="注意">注意</h1>
<p><font size="4">启动CommandLineRunner的执行其实是整个应用启动的一部分，<strong>项目是在CommandLineRunner执行完成之后才启动完成的</strong></font></p>
<p><font size="4">如果CommandLineRunner执行中的操作影响到了主线程，可以<strong>重新开启一个线程</strong>，让CommandLineRunner单独去做我们想要做的操作</font></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(value = 1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCommandLineRunner</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... strings)</span>&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>()&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                    i++;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">                        System.out.println(<span class="string">&quot;过去了10秒钟……,i的值为：&quot;</span> + i);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (i == <span class="number">4</span>) &#123; <span class="comment">//第40秒时抛出一个异常</span></span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参考链接</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/366528471">使用 SpringBoot 的
CommandLineRunner 遇到的坑</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 杂七杂八 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> CommandLineRunner </tag>
            
            <tag> 预加载 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot使用AOP实现日志记录 + Slf4j 日志配置]]></title>
      <url>/articles/SpringBoot%E4%BD%BF%E7%94%A8AOP%E5%AE%9E%E7%8E%B0%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95%20+%20Slf4j%20%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h1 id="下载依赖">下载依赖</h1>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--fastjson依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--AOP--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="日志打印格式">日志打印格式</h1>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">log.info(<span class="string">&quot;=======Start=======&quot;</span>);</span><br><span class="line"><span class="comment">// 打印请求 URL</span></span><br><span class="line">log.info(<span class="string">&quot;URL            : &#123;&#125;&quot;</span>,);</span><br><span class="line"><span class="comment">// 打印描述信息</span></span><br><span class="line">log.info(<span class="string">&quot;BusinessName   : &#123;&#125;&quot;</span>, );</span><br><span class="line"><span class="comment">// 打印 Http method</span></span><br><span class="line">log.info(<span class="string">&quot;HTTP Method    : &#123;&#125;&quot;</span>, );</span><br><span class="line"><span class="comment">// 打印调用 controller 的全路径以及执行方法</span></span><br><span class="line">log.info(<span class="string">&quot;Class Method   : &#123;&#125;.&#123;&#125;&quot;</span>, );</span><br><span class="line"><span class="comment">// 打印请求的 IP</span></span><br><span class="line">log.info(<span class="string">&quot;IP             : &#123;&#125;&quot;</span>,);</span><br><span class="line"><span class="comment">// 打印请求入参</span></span><br><span class="line">log.info(<span class="string">&quot;Request Args   : &#123;&#125;&quot;</span>,);</span><br><span class="line"><span class="comment">// 打印出参</span></span><br><span class="line">log.info(<span class="string">&quot;Response       : &#123;&#125;&quot;</span>, );</span><br><span class="line"><span class="comment">// 结束后换行</span></span><br><span class="line">log.info(<span class="string">&quot;=======End=======&quot;</span> + System.lineSeparator());</span><br></pre></td></tr></table></figure>
<h1 id="systemlog-自定义切点注解">SystemLog 自定义切点注解</h1>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Around()   // 跳转到源码处，参考源注解</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span> <span class="comment">// 注解保持的阶段</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD&#125;)</span>   <span class="comment">// 注解可以加在哪些东西的上面，该注解可以注解在 方法上</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SystemLog &#123;   <span class="comment">// 日志记录 切点注解</span></span><br><span class="line"></span><br><span class="line">    String <span class="title function_">BusinessName</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;   <span class="comment">// 自定义 描述信息</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="logaspect-日志记录切面类">LogAspect 日志记录切面类</h1>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>  <span class="comment">// 注入容器</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">// 标识为切面类</span></span><br><span class="line"><span class="meta">@Slf4j</span>  <span class="comment">// 日志</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspect</span> &#123;    <span class="comment">// 日志记录切面类</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用注解标识的方法 判断切点</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(org.bailang.annotation.SystemLog)&quot;)</span>  <span class="comment">// @annotation()的参数最好是 完整路径（记得加双引号）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointCut</span><span class="params">()</span>&#123;   <span class="comment">// 切点</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理输出日志的 advice</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Around</span> 环绕控制，在 join point 前和 joint point 退出后都执行的 advice</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint 被增强的方法信息封装出来的对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Around(&quot;pointCut()&quot;)</span>   <span class="comment">// ”pointCut()“ 所运用的切点的方法名</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">printLog</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;    <span class="comment">// 抛出异常，让统一异常处理。否则所有异常都在这里出现，难以定位异常</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            handleBefore(joinPoint);    <span class="comment">// 目标方法调用前 执行的方法</span></span><br><span class="line">            result = joinPoint.proceed();   <span class="comment">// 相当于调用增强的目标方法，获取目标方法的返回结果</span></span><br><span class="line">            handleAfter(result);     <span class="comment">// 目标方法调用后 执行的方法</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123; <span class="comment">//  try后必须执行的语句</span></span><br><span class="line">            <span class="comment">// 结束后换行</span></span><br><span class="line">            log.info(<span class="string">&quot;=======End=======&quot;</span> + System.lineSeparator()); <span class="comment">// System.lineSeparator()是获取 当前所执行程序的系统的换行符</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;  <span class="comment">// 必须返回 调用目标方法之后返回的的结果</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleBefore</span><span class="params">(ProceedingJoinPoint joinPoint)</span> &#123;    <span class="comment">// 目标方法调用前 执行的方法</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// RequestAttributes requestAttributes = RequestContextHolder.getRequestAttributes();  // 获取当前线程的信息 请求对象</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取当前线程的信息（需将RequestContextHolder接口强转为实现类） 请求对象</span></span><br><span class="line">        <span class="type">ServletRequestAttributes</span> <span class="variable">requestAttributes</span> <span class="operator">=</span> (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> requestAttributes.getRequest();    <span class="comment">// 获取 请求对象</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 被增强方法的注解对象</span></span><br><span class="line">        <span class="type">SystemLog</span> <span class="variable">systemLog</span> <span class="operator">=</span> getSystemLog(joinPoint);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;=======Start=======&quot;</span>);</span><br><span class="line">        <span class="comment">// 打印当前时间</span></span><br><span class="line">        <span class="comment">// log.info(&quot;Time           : &#123;&#125;&quot;, new SimpleDateFormat(&quot;yyyy-MM-dd : HH:mm:ss&quot;).format(new Date()));</span></span><br><span class="line">        <span class="comment">// 打印请求 URL</span></span><br><span class="line">        log.info(<span class="string">&quot;URL            : &#123;&#125;&quot;</span>, request.getRequestURL());</span><br><span class="line">        <span class="comment">// 打印描述信息</span></span><br><span class="line">        log.info(<span class="string">&quot;BusinessName   : &#123;&#125;&quot;</span>, systemLog.BusinessName());</span><br><span class="line">        <span class="comment">// 打印 Http method</span></span><br><span class="line">        log.info(<span class="string">&quot;HTTP Method    : &#123;&#125;&quot;</span>, request.getMethod());</span><br><span class="line">        <span class="comment">// 打印调用 controller 的全路径以及执行方法   (通过joinPoint封装的方法信息获取)</span></span><br><span class="line">        log.info(<span class="string">&quot;Class Method   : &#123;&#125;.&#123;&#125;&quot;</span>, joinPoint.getSignature().getDeclaringType(), joinPoint.getSignature().getName());</span><br><span class="line">        <span class="comment">// 打印请求的 IP</span></span><br><span class="line">        log.info(<span class="string">&quot;IP             : &#123;&#125;&quot;</span>, request.getRemoteHost());</span><br><span class="line">        <span class="comment">// 打印请求入参   (通过joinPoint封装的方法信息获取)</span></span><br><span class="line">        log.info(<span class="string">&quot;Request Args   : &#123;&#125;&quot;</span>, JSON.toJSONString(joinPoint.getArgs()));    <span class="comment">// 将数组转换为JSON输出</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleAfter</span><span class="params">(Object result)</span> &#123;   <span class="comment">// 目标方法调用后 执行的方法</span></span><br><span class="line">        <span class="comment">// 打印出参</span></span><br><span class="line">        log.info(<span class="string">&quot;Response       : &#123;&#125;&quot;</span>, JSON.toJSONString(result));    <span class="comment">// 进行JSON的序列化，转换为JSON格式输出</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SystemLog <span class="title function_">getSystemLog</span><span class="params">(ProceedingJoinPoint joinPoint)</span> &#123;    <span class="comment">// 获取 被增强方法的注解对象</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// joinPoint.getSignature() 相当于把 注解了切点注解的整段方法代码块 封装成了一个对象</span></span><br><span class="line">        <span class="type">MethodSignature</span> <span class="variable">methodSignature</span> <span class="operator">=</span> (MethodSignature) joinPoint.getSignature();    <span class="comment">// 强转为子接口MethodSignature，获取 被增强方法的方法对象</span></span><br><span class="line">        <span class="type">SystemLog</span> <span class="variable">systemLog</span> <span class="operator">=</span> methodSignature.getMethod().getAnnotation(SystemLog.class);   <span class="comment">// getAnnotation()参数：传入所需获取注解的字节码</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> systemLog;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="示例标注方法为切点">示例：标注方法为切点</h2>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/article&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span>  <span class="title class_">ArticleController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleService articleService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// @CrossOrigin // 跨域注解</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hotArticleList&quot;)</span></span><br><span class="line">    <span class="meta">@SystemLog(BusinessName = &quot;热门文章列表查询&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">hotArticleList</span><span class="params">()</span>&#123; <span class="comment">// 热门文章列表查询</span></span><br><span class="line">        <span class="comment">//查询热门文章，封装成ResponseResult返回</span></span><br><span class="line">        <span class="type">ResponseResult</span> <span class="variable">result</span> <span class="operator">=</span> articleService.hotArticleList();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/articleList&quot;)</span></span><br><span class="line">    <span class="meta">@SystemLog(BusinessName = &quot;分页查询文章列表&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">articleList</span><span class="params">(Long categoryId, Integer pageNum, Integer pageSize)</span>&#123;  <span class="comment">// 分页查询文章列表</span></span><br><span class="line"></span><br><span class="line">        <span class="type">ResponseResult</span> <span class="variable">result</span> <span class="operator">=</span> articleService.articleList(categoryId, pageNum, pageSize);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// @RequestMapping(value = &quot;&#123;id&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@SystemLog(BusinessName = &quot;获取文章详情&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseResult <span class="title function_">getArticleDetail</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;    <span class="comment">// 获取文章详情</span></span><br><span class="line"></span><br><span class="line">        <span class="type">ResponseResult</span> <span class="variable">result</span> <span class="operator">=</span> articleService.getArticleDetail(id);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 更新文章浏览次数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="slf4j-日志配置">Slf4j 日志配置</h1>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--该路径为：当前项目文件夹下/Logs/blog/log--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;LOG_HOME&quot;</span> <span class="attr">value</span>=<span class="string">&quot;./Logs/blog/log&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 彩色日志 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 彩色日志依赖的渲染类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">&quot;clr&quot;</span> <span class="attr">converterClass</span>=<span class="string">&quot;org.springframework.boot.logging.logback.ColorConverter&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">&quot;wex&quot;</span> <span class="attr">converterClass</span>=<span class="string">&quot;org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">&quot;wEx&quot;</span> <span class="attr">converterClass</span>=<span class="string">&quot;org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 彩色日志格式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE_LOG_PATTERN&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;CONSOLE_LOG_PATTERN:-%clr(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;) %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(---)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 控制台输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;log.pattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--按照每天生成日志文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;FILE&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件输出的文件名--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/blog.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>60<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;---[%thread]--- %-5level--- %logger&#123;50&#125;  -  %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件最大的大小--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">triggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxFileSize</span>&gt;</span>50MB<span class="tag">&lt;/<span class="name">MaxFileSize</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">triggeringPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--myibatis log configure--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;logger name=&quot;com.apache.ibatis&quot; level=&quot;DEBUG&quot;/&gt;</span></span><br><span class="line"><span class="comment">    &lt;logger name=&quot;java.sql.Connection&quot; level=&quot;DEBUG&quot;/&gt;</span></span><br><span class="line"><span class="comment">    &lt;logger name=&quot;java.sql.Statement&quot; level=&quot;DEBUG&quot;/&gt;</span></span><br><span class="line"><span class="comment">    &lt;logger name=&quot;java.sql.PreparedStatement&quot; level=&quot;DEBUG&quot;/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--&lt;logger name=&quot;com.guardlbt.mapper&quot; level=&quot;INFO&quot;&gt;&lt;/logger&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志输出级别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 杂七杂八 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> AOP </tag>
            
            <tag> Slf4j </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[七牛云文件上传代码模板（Java）]]></title>
      <url>/articles/%E4%B8%83%E7%89%9B%E4%BA%91%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF%EF%BC%88Java%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="下载依赖">下载依赖</h1>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--七牛云上传 java-sdk--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.qiniu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>qiniu-java-sdk<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>[7.7.0, 7.10.99]<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="上传下载代码模板">上传、下载代码模板</h1>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(&quot;oss&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上传凭证 与 仓库名</span></span><br><span class="line">    <span class="comment">// 在 application.yml 配置文件修改</span></span><br><span class="line">    <span class="keyword">private</span> String accessKey;   <span class="comment">// access key</span></span><br><span class="line">    <span class="keyword">private</span> String secretKey;   <span class="comment">// secret key</span></span><br><span class="line">    <span class="keyword">private</span> String bucket;  <span class="comment">// bucket name</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDownloadFile</span><span class="params">(String key)</span>&#123; <span class="comment">// 下载测试</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">domain</span> <span class="operator">=</span> <span class="string">&quot;qiniu.heyzqf.com&quot;</span>; <span class="comment">// 自定义域名</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// domain   下载 domain, eg: qiniu.com【必须】</span></span><br><span class="line">        <span class="comment">// useHttps 是否使用 https【必须】</span></span><br><span class="line">        <span class="comment">// key      下载资源在七牛云存储的 key【必须】</span></span><br><span class="line">        <span class="type">DownloadUrl</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DownloadUrl</span>(domain, <span class="literal">false</span>, key);</span><br><span class="line">        url.setAttname(<span class="string">&quot;TestPIC.png&quot;</span>); <span class="comment">// 设置下载文件的 文件名</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">urlString</span> <span class="operator">=</span> url.buildURL();</span><br><span class="line">            System.out.println(urlString);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (QiniuException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// @Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testReadFileDir</span><span class="params">()</span>&#123; <span class="comment">// 文件夹上传</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;C:\\Users\\zqf\\Desktop\\1\\Blog\\source\\img\\PIC&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">        File[] listFiles = dir.listFiles();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(File file : listFiles)&#123;</span><br><span class="line">            inputStreamUpload(file.getAbsolutePath());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// @Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">inputStreamUpload</span><span class="params">(String path)</span>&#123;   <span class="comment">// InputStream上传测试</span></span><br><span class="line">        <span class="comment">// 地区</span></span><br><span class="line">        <span class="type">Region</span> <span class="variable">regionHuaNan</span> <span class="operator">=</span> Region.huanan();</span><br><span class="line">        <span class="comment">// 构造一个带指定 Region 对象的配置类</span></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">cfg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>(regionHuaNan);</span><br><span class="line">        cfg.resumableUploadAPIVersion = Configuration.ResumableUploadAPIVersion.V2;<span class="comment">// 指定分片上传版本</span></span><br><span class="line"></span><br><span class="line">        <span class="type">UploadManager</span> <span class="variable">uploadManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UploadManager</span>(cfg);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 默认不指定key的情况下，以文件内容的hash值作为文件名</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;测试目录/&quot;</span>+PathUtils.generateFilePath(path);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 如果是Windows情况下，格式是 D:\\qiniu\\test.png</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">localFilePath</span> <span class="operator">=</span> path;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(localFilePath);</span><br><span class="line">            <span class="type">Auth</span> <span class="variable">auth</span> <span class="operator">=</span> Auth.create(accessKey, secretKey);</span><br><span class="line">            <span class="type">String</span> <span class="variable">upToken</span> <span class="operator">=</span> auth.uploadToken(bucket);</span><br><span class="line"></span><br><span class="line">            <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">DefaultPutRet</span> <span class="variable">putRet</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;上传文件： &quot;</span> + localFilePath);</span><br><span class="line">                response = uploadManager.put(inputStream, key, upToken, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">                <span class="comment">// 解析上传成功的结果</span></span><br><span class="line">                putRet = <span class="keyword">new</span> <span class="title class_">Gson</span>().fromJson(response.bodyString(), DefaultPutRet.class);</span><br><span class="line">                System.out.println(<span class="string">&quot;putRet.key: &quot;</span> + putRet.key);</span><br><span class="line">                System.out.println(<span class="string">&quot;putRet.hash: &quot;</span> + putRet.hash);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (QiniuException ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">                <span class="type">Response</span> <span class="variable">r</span> <span class="operator">=</span> ex.response;</span><br><span class="line">                System.err.println(r.toString());</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.err.println(r.bodyString());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (QiniuException e2) &#123;</span><br><span class="line">                    e2.printStackTrace();</span><br><span class="line">                    <span class="comment">//ignore</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;上传成功：&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;    response: &quot;</span> + response);</span><br><span class="line">            System.out.println(<span class="string">&quot;    putRet: &quot;</span> + putRet);</span><br><span class="line">            System.out.println(<span class="string">&quot;********************************************************************************************************************************************************************************************************************************************************************************************************************&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="pathutils-路径工具类">PathUtils 路径工具类</h1>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PathUtils</span> &#123;    <span class="comment">// 文件路径生成 工具类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateFilePath</span><span class="params">(String fileName)</span>&#123;</span><br><span class="line">        <span class="comment">// 根据日期生成路径   2022/10/31/</span></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">dateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy/MM/dd/&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">datePath</span> <span class="operator">=</span> dateFormat.format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 随机生成UUID 作为文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取文件原后缀名，使新文件名的后缀与原文件一样</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">        <span class="comment">// test.jpg -&gt; .jpg</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileType</span> <span class="operator">=</span> fileName.substring(index);</span><br><span class="line">        <span class="comment">// 拼接字符串返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>().append(datePath).append(uuid).append(fileType).toString();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 杂七杂八 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 七牛云 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot配置文件——.properties文件和.yml文件]]></title>
      <url>/articles/SpringBoot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E2%80%94%E2%80%94.properties%E6%96%87%E4%BB%B6%E5%92%8C.yml%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p><font size="4"> </font></p>
<p><font size="4"></font></p>
<p></p>
<h1 id="前言配置文件的作用">前言：配置文件的作用</h1>
<p><font size="4">
通常情况下，一个项目中的一些重要信息都会放在配置文件中，比如：<strong>数据库的连接信息</strong>、<strong>项目的启动端口</strong>、一些<strong>第三方的秘钥</strong>、<strong>记录信息的普通日志</strong>和<strong>异常日志</strong>等。
</font></p>
<h1 id="springboot的配置文件-.properties-和-.yml">SpringBoot的配置文件
（.properties 和 .yml）</h1>
<p><font size="4"> Spring
Boot的配置文件主要有两种格式：.properties文件和.yml文件 </font> <img src="/articles/SpringBoot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E2%80%94%E2%80%94.properties%E6%96%87%E4%BB%B6%E5%92%8C/../../img/posts_img/SpringBoot配置文件properties和yml/2022-10-27-23-05-16.png"></p>
<p><font size="4">
这两种格式的配置文件可以共同存在于一个项目中，但一般情况下我们会统一格式，只使用其中的一种，来降低故障率。
</font></p>
<p><font size="4">
.properties是最早期的SpringBoot配置文件的格式，也是现在默认的配置文件格式，出现的时间早于.yml
</font></p>
<p><font size="4">
<strong>当这两个配置文件中出现相同的配置时，会优先执行.properties中的配置，然后再执行.yml中的配置，即.properties的优先级大于.yml</strong>
</font></p>
<ul>
<li><p><font size="4"><strong>properties</strong></font></p>
<p><font size="4">
创建SpringBoot项目后会自动生成一个配置文件，在该文件中，信息以键值对的形式进行储存
</font> <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置项目的信息</span></span><br><span class="line"><span class="comment"># key=value</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8080</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/testdb?</span></span><br><span class="line"><span class="attr">characterEncoding</span>=<span class="string">utf8</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li><p><font size="4">缺点</font></p>
<p><font size="4">对于同一个对象的多个属性进行设置时很麻烦，需要多次重复，存在冗余配置项；当我们想要设置同一个对象很多的信息时，需要多次重复这个信息：</font>
<img src="/articles/SpringBoot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E2%80%94%E2%80%94.properties%E6%96%87%E4%BB%B6%E5%92%8C/../../img/posts_img/SpringBoot配置文件properties和yml/2022-10-27-23-17-55.png"></p></li>
</ul></li>
<li><p><font size="4"><strong>yml</strong></font></p>
<p><font size="4"> yml是YMAL的缩写，全称是 Yet Another Markup
Language，另一种<strong>标记语言</strong> </font></p>
<p><font size="4">
YMAL是一个可读性高、易于理解、用来表达数据序列化的格式。 </font></p>
<p><font size="4">
YMAL的作用是可以做到跨语言使用，不仅Java中可以使用，Go和python中都可以使用
</font></p>
<ul>
<li><font size="4">语法格式：</font>
<ul>
<li><font size="4"><strong>key: value</strong>
表示键值对关系，冒号后面必须加一个空格</font></li>
<li><font size="4">大小写敏感</font></li>
<li><font size="4">缩进时不允许使用tab键，只能用空格</font></li>
<li><font size="4">松散表示，java使用驼峰命名，而用原名或者-代替都可以正确映射，比如java中的名称是lastName，yml中使用lastName或者last-name都可以映射到</font></li>
</ul></li>
<li><font size="4">键值关系</font> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通常写法</span></span><br><span class="line"><span class="attr">student:</span></span><br><span class="line">  <span class="attr">id:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">张三</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 另一种写法</span></span><br><span class="line"><span class="attr">student:</span> &#123; <span class="attr">id:</span> <span class="number">1</span>, <span class="attr">name:</span> <span class="string">张三</span>, <span class="attr">age:</span> <span class="number">20</span>&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><font size="4"> yml中，字符串默认不需要加上单引号或者双引号 </font></p>
<p><font size="4">
<strong>使用双引号</strong>：不会转义字符串中的特殊字符，特殊字符会作为本身想要表达的意思：比如
name: “zhangsan ”,会输出：zhangsan 换行 23 (下面使用<strong><span class="citation" data-cites="ConfigurationProperties">@ConfigurationProperties</span></strong>注解演示)
</font> <img src="/articles/SpringBoot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E2%80%94%E2%80%94.properties%E6%96%87%E4%BB%B6%E5%92%8C/../../img/posts_img/SpringBoot配置文件properties和yml/2022-10-28-17-03-17.png">
<img src="/articles/SpringBoot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E2%80%94%E2%80%94.properties%E6%96%87%E4%BB%B6%E5%92%8C/../../img/posts_img/SpringBoot配置文件properties和yml/2022-10-28-17-03-51.png"></p>
<p><font size="4">
<strong>使用单引号</strong>：会转义特殊字符，特殊字符失去特殊作用变成普通字符
</font> <img src="/articles/SpringBoot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E2%80%94%E2%80%94.properties%E6%96%87%E4%BB%B6%E5%92%8C/../../img/posts_img/SpringBoot配置文件properties和yml/2022-10-28-17-04-41.png">
<font size="4"> <strong>使用YML连接数据库：</strong> </font> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">datasource:</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/bailang_blog?characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure>
<font size="4"> 表示常用的字面量： </font> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 普通字面量</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line"><span class="attr">age:</span> <span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 布尔类型</span></span><br><span class="line"><span class="attr">flag:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日期</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2022</span><span class="string">/10/27</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 同一个对象的多个属性</span></span><br><span class="line"><span class="attr">people:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">lisi</span></span><br><span class="line">      <span class="attr">age:</span> <span class="number">20</span></span><br><span class="line"><span class="comment"># 数组</span></span><br><span class="line"><span class="comment"># 用 -表示数组中的一个元素</span></span><br><span class="line"><span class="attr">pets:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pig</span></span><br><span class="line"><span class="comment"># 另一种写法</span></span><br><span class="line"><span class="attr">petss:</span> [<span class="string">dog</span>,<span class="string">cat</span>,<span class="string">pig</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># list对象、set对象、数组对象</span></span><br><span class="line"><span class="attr">students:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line">        <span class="attr">age:</span> <span class="number">22</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">lisi</span></span><br><span class="line">        <span class="attr">age:</span> <span class="number">20</span></span><br><span class="line">      <span class="bullet">-</span> &#123;<span class="attr">name:</span> <span class="string">wangwu</span>,<span class="attr">age:</span> <span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure></p></li>
</ul>
<h1 id="读取配置文件的方法">读取配置文件的方法</h1>
<h2 id="value注解读取单个配置项"><span class="citation" data-cites="Value注解读取单个配置项">@Value注解读取单个配置项</span></h2>
<p><font size="4">
如果我们想要主动的读取配置文件中的信息，可以使用注解<strong><span class="citation" data-cites="Value">@Value</span></strong>，使用格式：
</font> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String port;</span><br></pre></td></tr></table></figure> <font size="4">
在属性前加上@Value注解，后面的括号写入要读取的配置中哪个key，比如读取下面的server.port，注意格式：双引号+${}
</font> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置项目端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7777</span></span><br></pre></td></tr></table></figure> <img src="/articles/SpringBoot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E2%80%94%E2%80%94.properties%E6%96%87%E4%BB%B6%E5%92%8C/../../img/posts_img/SpringBoot配置文件properties和yml/2022-10-28-17-10-48.png"></p>
<h2 id="configurationproperties读取配置信息"><span class="citation" data-cites="ConfigurationProperties读取配置信息">@ConfigurationProperties读取配置信息</span></h2>
<ul>
<li><p><font size="4">读取对应前缀的后面的属性</font> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="comment">// 将类定义为一个bean的注解，比如 @Component,@Service,@Controller,@Repository</span></span><br><span class="line"><span class="comment">// 或者 @Configuration</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">// 表示使用配置文件中前缀为datatest的属性的值初始化该bean定义产生的的bean实例的同名属性</span></span><br><span class="line"><span class="comment">// 在使用时这个定义产生的bean时，其属性test会是：这是另一个测试属性</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;datatest&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigurationPropertiesTest</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String test;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<font size="4">对应application.yml配置文件内容如下：</font> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">datatest:</span></span><br><span class="line">  <span class="attr">test:</span> <span class="string">这是另一个测试属性</span></span><br></pre></td></tr></table></figure>
<img src="/articles/SpringBoot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E2%80%94%E2%80%94.properties%E6%96%87%E4%BB%B6%E5%92%8C/../../img/posts_img/SpringBoot配置文件properties和yml/2022-10-28-17-16-01.png">
<font size="4">读取配置属性的 <strong>list</strong></font> <img src="/articles/SpringBoot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E2%80%94%E2%80%94.properties%E6%96%87%E4%BB%B6%E5%92%8C/../../img/posts_img/SpringBoot配置文件properties和yml/2022-10-28-17-19-38.png"></p></li>
<li><p><font size="4">读取实体类
（将配置文件的一组对象映射到实体类上）</font>
<font size="4">使用格式：</font> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">//spring 启动时直接将配置文件映射到当前类属性上</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(&quot;test&quot;)</span> <span class="comment">// test是在配置好的key</span></span><br></pre></td></tr></table></figure>
<font size="4">在yml配置文件中，我们创建一个student对象：</font>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置信息</span></span><br><span class="line"><span class="attr">test:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">WhiteWaves</span></span><br><span class="line">  <span class="attr">id:</span> <span class="number">33</span></span><br><span class="line">  <span class="attr">app:</span></span><br><span class="line">    <span class="attr">field:</span> <span class="string">This</span> <span class="string">is</span> <span class="string">Field</span></span><br><span class="line">    <span class="attr">count:</span> <span class="number">99</span></span><br><span class="line">    <span class="attr">users:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">JBDC</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Spring</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Boot</span></span><br></pre></td></tr></table></figure>
<font size="4">将这个对象映射到User类中，也就是从配置文件里读取到类中</font>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(&quot;test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">App</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">App</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">App</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String field;</span><br><span class="line">        <span class="keyword">private</span> Integer count;</span><br><span class="line">        <span class="keyword">private</span> List&lt;String&gt; users = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<font size="4"><strong>使用注入的方式将对象注入到一个类中</strong></font>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigurationPropertiesTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">// 属性注入</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <img src="/articles/SpringBoot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E2%80%94%E2%80%94.properties%E6%96%87%E4%BB%B6%E5%92%8C/../../img/posts_img/SpringBoot配置文件properties和yml/2022-10-28-17-27-54.png">
<font size="4">注意包路径配置的问题！！！<strong>启动类和要注入的类包必须放在同级目录下，否则读取不到，会显示启动失败Application</strong></font>
<img src="/articles/SpringBoot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E2%80%94%E2%80%94.properties%E6%96%87%E4%BB%B6%E5%92%8C/../../img/posts_img/SpringBoot配置文件properties和yml/2022-10-28-17-29-19.png"></p></li>
</ul>
<h1 id="总结">总结</h1>
<ul>
<li><font size="4">yml语法更简洁，可以解决数据冗余问题</font></li>
<li><font size="4">yml跨语言的通用性更好，它不支持java语言还支持golang
和python</font></li>
<li><font size="4">yml 支持更多的数据类型</font></li>
<li><font size="4">yml格式的配置文件在写的时候更容易出错（冒号后面需要加一个空格），而properties虽然写法更复杂但是不容易出错</font></li>
<li><font size="4">yml虽然可以和properties共存，但一个项目中最好统一格式，只用其中的一个</font></li>
</ul>
<p>参考链接</p>
<ul>
<li><a href="https://blog.csdn.net/Merciful_Lion/article/details/124149012">SpringBoot~配置文件properties和yml.</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 杂七杂八 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Maven安装教程]]></title>
      <url>/articles/Maven%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<blockquote>
<p><font size="4">本文须知：安装maven环境之前要先安装java jdk环境 (Maven
3.3+ require JDK 1.7 及以上)</font></p>
</blockquote>
<blockquote>
<p><font size="4">本文环境：JDK：1.8.0、Maven：3.6.3</font></p>
</blockquote>
<h1 id="第一步下载-maven">第一步：下载 Maven</h1>
<blockquote>
<p><font size="4">官方下载链接：https://maven.apache.org/download.cgi</font></p>
</blockquote>
<p><font size="4">Binary是可执行版本，已经编译好可以直接使用</font></p>
<p><font size="4">Source是源代码版本，需要自己编译成可执行软件才可使用</font></p>
<blockquote>
<p><font size="4">官网经常上不去，下载不成功，可以在下面的百度云盘获取：(Maven：3.6.3)</font></p>
</blockquote>
<blockquote>
<p><font size="4">链接：https://pan.baidu.com/s/1a9UkvEgwiucwP7oTK3HV-Q?pwd=9ng3
提取码：9ng3</font></p>
</blockquote>
<p><font size="4">选择已经编译好的windows版本进行安装：选择zip版本(如下图):</font>
<img src="/.com//../../img/posts_img/Maven安装教程/2022-10-26-20-55-22.png"></p>
<p><font size="4">解压完后：</font> <img src="/.com//../../img/posts_img/Maven安装教程/2022-10-26-20-56-31.png"></p>
<h1 id="第二步maven-环境变量配置">第二步：Maven 环境变量配置</h1>
<p><font size="4">（这里我没有这个需求，就没有去配置环境变量<del>绝对不是因为懒</del>，所以用了网上的截图）</font></p>
<p><img src="/.com//../../img/posts_img/Maven安装教程/2022-10-26-21-00-50.png"></p>
<p><img src="/.com//../../img/posts_img/Maven安装教程/2022-10-26-21-00-55.png"></p>
<ul>
<li><p><font size="4">开始配置环境变量（点击系统变量，新建按钮）：</font></p>
<blockquote>
<p><font size="4">新建系统变量：MAVEN_HOME=D:\maven\apache-maven-3.8.4
(以<strong>自己安装的路径和版本</strong>为准)</font> <img src="/.com//../../img/posts_img/Maven安装教程/2022-10-26-21-02-01.png"></p>
</blockquote></li>
<li><p><font size="4">编辑变量Path：</font></p>
<blockquote>
<p><font size="4">添加变量值：%MAVEN_HOME%\bin</font> <img src="/.com//../../img/posts_img/Maven安装教程/2022-10-26-21-03-37.png">
<img src="/.com//../../img/posts_img/Maven安装教程/2022-10-26-21-03-42.png"></p>
</blockquote></li>
</ul>
<h1 id="第三步验证maven环境配置是否成功">第三步：验证Maven环境配置是否成功</h1>
<blockquote>
<p><font size="4">终端输入命令：输入命令：mvn -version</font></p>
</blockquote>
<ul>
<li><font size="4">安装成功</font> <img src="/.com//../../img/posts_img/Maven安装教程/2022-10-26-21-07-03.png"></li>
</ul>
<h1 id="第四步配置maven仓库以及相关设置">第四步：配置Maven仓库以及相关设置</h1>
<ul>
<li><p><font size="4">1：在
maven同级目录下建一个maven仓库（找一个适合管理的位置）</font> <img src="/.com//../../img/posts_img/Maven安装教程/2022-10-26-21-11-04.png"></p></li>
<li><p><font size="4">2：在路径
C:\Users\User\Desktop\Maven\apache-maven-3.6.3\conf
(自己安装maven的目录路径) 找到 settings.xml配置文件</font> <img src="/.com//../../img/posts_img/Maven安装教程/2022-10-26-21-14-39.png"></p>
<ul>
<li><p><font size="4">找到节点<strong>localRepository</strong>，在注释外添加<strong>自己仓库的地址</strong></font>
<img src="/.com//../../img/posts_img/Maven安装教程/2022-10-26-21-16-02.png"></p></li>
<li><p><font size="4">配置镜像（采用国内阿里云的镜像下载依赖会快很多）：</font></p>
<blockquote>
<p><font size="4">在settings.xml配置文件中找到mirrors节点,添加如下配置（注意要添加在<mirrors>和</mirrors>两个标签之间，其它配置同理）,放在默认节点的前面</font>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 阿里云仓库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/repositories/central/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure> <img src="/.com//../../img/posts_img/Maven安装教程/2022-10-26-21-21-35.png"></p>
</blockquote></li>
<li><p><font size="4">配置JDK：</font></p>
<blockquote>
<p><font size="4">在settings.xml配置文件中找到profiles节点，添加如下配置：</font>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- java jdk1.8版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure> <img src="/.com//../../img/posts_img/Maven安装教程/2022-10-26-21-32-06.png"></p>
</blockquote></li>
</ul></li>
</ul>
<p><font size="4">配置完成，进入终端，输入命令：mvn help:system
测试，配置成功则本地仓库如下图显示：</font> <img src="/.com//../../img/posts_img/Maven安装教程/2022-10-26-21-33-36.png"></p>
<blockquote>
<p><font size="4">首次执行 mvn help:system
命令，Maven相关工具自动帮我们到Maven中央仓库下载缺省的或者Maven中央仓库更新的各种配置文件和类库（jar包)
到Maven本地仓库中。</font></p>
</blockquote>
<blockquote>
<p><font size="4">下载完各种文件后， mvn help:system
命令会打印出所有的Java系统属性和环境变量，这些信息对我们日常的编程工作很有帮助。</font></p>
</blockquote>
<h1 id="添加maven到idea中">添加Maven到IDEA中</h1>
<blockquote>
<p><font size="4">本地的Maven文件一般是配套IDEA一起使用，如何让每一次新建项目都选中自己的maven，本文推荐以下方案解决（避免每一次都要手动修改maven配置）：</font></p>
</blockquote>
<ul>
<li><p><font size="4"><strong>新建一个Maven项目</strong>，进入设置可以发现该新建项目没有指向我们本地的maven地址</font>
<img src="/.com//../../img/posts_img/Maven安装教程/2022-10-26-21-42-33.png"></p></li>
<li><p><font size="4">配置新建项目设置</font> <img src="/.com//../../img/posts_img/Maven安装教程/2022-10-26-21-44-37.png"></p></li>
<li><p><font size="4">找到Maven设置，选择自己的Maven目录地址、配置setting文件及仓库地址如下图：</font>
<img src="/.com//../../img/posts_img/Maven安装教程/2022-10-26-21-49-43.png"></p></li>
</ul>
<h1 id="注意事项">注意事项</h1>
<p><font size="4">如果Maven的版本高于IDEA的版本，有可能会出现这样的报错：</font>
<img src="/.com//../../img/posts_img/Maven安装教程/2022-10-26-22-04-31.png">
<font size="4">出现这种错误最好的解决办法就是：<strong>用当前IDEA自带的Maven插件和自带的Maven</strong>，因为这样最不容易出现版本问题</font></p>
<p><font size="4">手动降低Maven版本也行，Maven版本最好和IDEA同一年发布的，这样不容易出错</font></p>
<p>参考链接</p>
<ul>
<li><a href="https://blog.csdn.net/weixin_44080187/article/details/122933194">史上最详细的Maven安装教程</a></li>
<li><a href="https://blog.csdn.net/xuruilll/article/details/125655668">IDEA
Maven工程出现org.codehaus.plexus.component.repository.exception.ComponentLookupException错误</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 杂七杂八 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> Maven </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java项目中impl作用]]></title>
      <url>/articles/java%E9%A1%B9%E7%9B%AE%E4%B8%ADimpl%E4%BD%9C%E7%94%A8/</url>
      <content type="html"><![CDATA[<p><font size="4">在Java项目开发中，通常会将后台分成几层，常见的是三层<strong>MVC</strong>：</font></p>
<ul>
<li><font size="4"><strong>Model（模型层）</strong></font></li>
<li><font size="4"><strong>View（视图层）</strong></font></li>
<li><font size="4"><strong>Controller（控制层）</strong></font></li>
</ul>
<p><font size="4">而<strong>impl</strong>通常处于<strong>Controller层</strong>的<strong>service</strong>下，是用于存放<strong>service</strong>接口的实现类的</font></p>
<p><font size="4"><strong>impl</strong>的全称是<strong>implement</strong>，表示实现的意思，在Java语法中是实现接口的意思，所以<strong>impl</strong>在Java项目中是用于实现接口的</font></p>
<p><img src="/.com//../../img/posts_img/java项目中impl作用/2022-10-24-13-28-55.png"></p>
<p>参考链接</p>
<ul>
<li><a href="https://blog.csdn.net/maoziyang1996/article/details/87938663">java中impl作用</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 杂七杂八 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> 前后端分离 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[跨域问题]]></title>
      <url>/articles/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<!-- <font size=4></font> -->
<h1 id="前言">前言</h1>
<p><font size="4">做前后端分离项目的时候，在前端页面测试接口时遇到的一个报错：</font>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access to XMLHttpRequest at &#x27;http://localhost:7777/article/hotArticleList&#x27; from origin &#x27;http://localhost:8080&#x27; has been blocked by CORS policy: Response to preflight request doesn&#x27;t pass access control check: No &#x27;Access-Control-Allow-Origin&#x27; header is present on the requested resource.</span><br></pre></td></tr></table></figure>
<font size="4">之后上百度查了查发现是跨域的问题，那么就有了这篇文章。</font></p>
<h1 id="什么是跨域">什么是跨域?</h1>
<p><font size="4"><strong>跨域是指从 一个域名的网页 去请求
另一个域名的资源</strong>。比如从百度（baidu.com）页面去请求我博客（heyzqf.com）的资源，由于有<strong>同源策略</strong>的关系，一般是不允许这么直接访问的</font></p>
<h1 id="什么是同源策略">什么是同源策略?</h1>
<p><font size="4"><strong>同源策略</strong>是浏览器中一个非常重要的安全策略，它的作用是限制不同源之间的交互，从而有效避免一些浏览器层面的攻击。不同源之间的请求是无法交互的，必须符合同源策略的请求才能进行访问。</font></p>
<p><font size="4">什么是同源:</font></p>
<ul>
<li><p><font size="4">协议、域名、端口都相同</font></p>
<table>
<colgroup>
<col style="width: 30%">
<col style="width: 30%">
<col style="width: 30%">
<col style="width: 9%">
</colgroup>
<thead>
<tr class="header">
<th>URL1</th>
<th>URL2</th>
<th>说明</th>
<th>是否同源</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>http://localhost:4000/archives/</td>
<td>http://localhost:4000/tags/</td>
<td>协议、域名、端口均相同</td>
<td>同源</td>
</tr>
<tr class="even">
<td>http://localhost:4000/archives/</td>
<td>https://localhost:4000/tags/</td>
<td>协议不同，域名和端口相同</td>
<td>不同源</td>
</tr>
<tr class="odd">
<td>http://heyzqf.com/archives/</td>
<td>http://localhost:4000/tags/</td>
<td>域名不同，协议和端口相同</td>
<td>不同源</td>
</tr>
<tr class="even">
<td>http://localhost:8080/archives/</td>
<td>http://localhost:7777/tags/</td>
<td>端口不同，域名和协议相同</td>
<td>不同源</td>
</tr>
</tbody>
</table></li>
</ul>
<h1 id="为什么要跨域">为什么要跨域？</h1>
<p><font size="4">在一些情况下，我们是需要跨域访问的。比如，程序员开发网站的时候，就有可能需要在<strong>本地</strong>访问<strong>服务器</strong>的数据。再比如某公司的A页面（a.app.com）需要获取B页面（b.app.com）。</font></p>
<h1 id="解决方法">解决方法</h1>
<p><font size="4">使用 CORS 策略可以了。</font></p>
<p><font size="4">CORS: Cross Origin Resource
Sharing（跨域资源共享）</font></p>
<p><font size="4">在 Spring Boot项目 中解决跨域问题的三种方案：</font></p>
<ul>
<li><p><font size="4">方案一：在目标方法上添加 <span class="citation" data-cites="CrossOrigin注解">@CrossOrigin注解</span> </font>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin</span> <span class="comment">// 跨域注解</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/hotArticleList&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseResult <span class="title function_">hotArticleList</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//查询热门文章，封装成ResponseResult返回</span></span><br><span class="line">    <span class="type">ResponseResult</span> <span class="variable">result</span> <span class="operator">=</span> articleService.hotArticleList();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
<li><p><font size="4">方案二：添加 CORS 过滤器</font>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 配置类注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">// 注入Spring容器</span></span><br><span class="line">    <span class="comment">// (org.springframework.web.filter.CorsFilter)</span></span><br><span class="line">    <span class="keyword">public</span> CorsFilter <span class="title function_">corsFilter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">corsConfiguration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">        <span class="comment">// 允许哪些域访问</span></span><br><span class="line">        corsConfiguration.addAllowedOrigin(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 请求的头字段</span></span><br><span class="line">        corsConfiguration.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 请求的方式</span></span><br><span class="line">        corsConfiguration.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// (org.springframework.web.cors.UrlBasedCorsConfigurationSource)</span></span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">        <span class="comment">// 映射路径</span></span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, corsConfiguration);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsFilter</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
<li><p><font size="4">方案三：实现 WebMvcConfigurer 接口， 重写
addCorsMappings 方法</font> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">// 设置允许跨域的路径, 映射</span></span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                <span class="comment">// 设置允许跨域请求的域名</span></span><br><span class="line">                .allowedOriginPatterns(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                <span class="comment">// 设置允许的请求方式</span></span><br><span class="line">                .allowedMethods(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;DELETE&quot;</span>, <span class="string">&quot;PUT&quot;</span>, <span class="string">&quot;HEAD&quot;</span>, <span class="string">&quot;OPTIONS&quot;</span>)</span><br><span class="line">                <span class="comment">// 是否允许cookie</span></span><br><span class="line">                .allowCredentials(<span class="literal">true</span>)</span><br><span class="line">                <span class="comment">// 设置允许的header属性</span></span><br><span class="line">                .allowedHeaders(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                <span class="comment">// 跨域允许时间, 3600秒内浏览器不再询问，有效期</span></span><br><span class="line">                .maxAge(<span class="number">3600</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
</ul>
<p>参考链接</p>
<ul>
<li><a href="https://blog.csdn.net/u011236348/article/details/120318852">跨域问题的解决方案</a></li>
<li><a href="https://www.bilibili.com/video/BV12U4y1f7Qi?spm_id_from=333.1007.top_right_bar_window_history.content.click&amp;vd_source=dc2de764efd96537d7ff3b89b0ffb064">什么是跨域以及如何解决？通俗易懂带你彻底搞定</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 杂七杂八 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> 前后端分离 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Unsatisfied dependency expressed through field 'baseMapper'解决方法]]></title>
      <url>/articles/Unsatisfied%20dependency%20expressed%20through%20field%20'baseMapper'%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="问题">问题</h1>
<p><font size="4">项目报异常：</font></p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Unsatisfied dependency expressed through field &#x27;articleService&#x27;;</span><br><span class="line">Unsatisfied dependency expressed through field &#x27;baseMapper&#x27;;</span><br></pre></td></tr></table></figure>
<h1 id="解决方法">解决方法</h1>
<p><font size="5">应该是Mapper没有被扫描到</font></p>
<ul>
<li><p><font size="4">方法一：添加@MapperScan("xxx.xxx.xxx")注解,
xxx.xxx.xxx就是你Mapper所在的包</font></p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;org.bailang.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaiLangBlogApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(BaiLangBlogApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
<li><p><font size="4">方法二：在mapper接口上面添加@Mapper注解</font></p>
<p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ArticleMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Article&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li>
<li><p><font size="4"><strong>重新编译项目，编译成功</strong></font></p></li>
</ul>
<p>参考链接</p>
<ul>
<li><a href="https://blog.csdn.net/zjwl199802/article/details/103713864/">https://blog.csdn.net/zjwl199802/article/details/103713864/</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 杂七杂八 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> Maven </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot运行多模块项目时出现异常：程序包xxx.xxx.xxx不存在]]></title>
      <url>/articles/SpringBoot%E8%BF%90%E8%A1%8C%E5%A4%9A%E6%A8%A1%E5%9D%97%E9%A1%B9%E7%9B%AE%E6%97%B6%E5%87%BA%E7%8E%B0%E5%BC%82%E5%B8%B8%EF%BC%9A%E7%A8%8B%E5%BA%8F%E5%8C%85xxx.xxx.xxx%E4%B8%8D%E5%AD%98%E5%9C%A8/</url>
      <content type="html"><![CDATA[<h1 id="问题">问题</h1>
<p><img src="/articles/SpringBoot%E8%BF%90%E8%A1%8C%E5%A4%9A%E6%A8%A1%E5%9D%97%E9%A1%B9%E7%9B%AE%E6%97%B6%E5%87%BA%E7%8E%B0%E5%BC%82%E5%B8%B8%EF%BC%9A%E7%A8%8B%E5%BA%8F%E5%8C%85xxx.xxx/../../img/posts_img/SpringBoot运行多模块项目时出现异常：程序包xxx.xxx.xxx不存在/2022-08-09-17-04-57.png"></p>
<h1 id="解决方法">解决方法</h1>
<p><font size="5">将项目的.idea和.imi文件删除，重新导入项目，重新生成.idea和.imi文件</font></p>
<ul>
<li><p><font size="4">删除文件</font></p>
<p><img src="/articles/SpringBoot%E8%BF%90%E8%A1%8C%E5%A4%9A%E6%A8%A1%E5%9D%97%E9%A1%B9%E7%9B%AE%E6%97%B6%E5%87%BA%E7%8E%B0%E5%BC%82%E5%B8%B8%EF%BC%9A%E7%A8%8B%E5%BA%8F%E5%8C%85xxx.xxx/../../img/posts_img/SpringBoot运行多模块项目时出现异常：程序包xxx.xxx.xxx不存在/2022-08-09-17-05-07.png"></p></li>
<li><p><font size="4">重新导入项目</font></p>
<p><img src="/articles/SpringBoot%E8%BF%90%E8%A1%8C%E5%A4%9A%E6%A8%A1%E5%9D%97%E9%A1%B9%E7%9B%AE%E6%97%B6%E5%87%BA%E7%8E%B0%E5%BC%82%E5%B8%B8%EF%BC%9A%E7%A8%8B%E5%BA%8F%E5%8C%85xxx.xxx/../../img/posts_img/SpringBoot运行多模块项目时出现异常：程序包xxx.xxx.xxx不存在/2022-08-09-17-08-43.png"></p></li>
<li><p><font size="4">选择Maven</font></p>
<p><img src="/articles/SpringBoot%E8%BF%90%E8%A1%8C%E5%A4%9A%E6%A8%A1%E5%9D%97%E9%A1%B9%E7%9B%AE%E6%97%B6%E5%87%BA%E7%8E%B0%E5%BC%82%E5%B8%B8%EF%BC%9A%E7%A8%8B%E5%BA%8F%E5%8C%85xxx.xxx/../../img/posts_img/SpringBoot运行多模块项目时出现异常：程序包xxx.xxx.xxx不存在/2022-08-09-17-09-11.png"></p></li>
<li><p><font size="4">配置项目JDK</font></p>
<p><img src="/articles/SpringBoot%E8%BF%90%E8%A1%8C%E5%A4%9A%E6%A8%A1%E5%9D%97%E9%A1%B9%E7%9B%AE%E6%97%B6%E5%87%BA%E7%8E%B0%E5%BC%82%E5%B8%B8%EF%BC%9A%E7%A8%8B%E5%BA%8F%E5%8C%85xxx.xxx/../../img/posts_img/SpringBoot运行多模块项目时出现异常：程序包xxx.xxx.xxx不存在/2022-08-09-17-12-17.png"></p></li>
<li><p><font size="4"><strong>重新编译项目，编译成功</strong></font></p></li>
</ul>
<p>参考链接</p>
<ul>
<li><a href="https://blog.csdn.net/qq_38069453/article/details/78332992">项目maven依赖成功，但编译一直报错：引用项目的类路径找不到</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 杂七杂八 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> Maven </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[什么是算法？]]></title>
      <url>/articles/%E4%BB%80%E4%B9%88%E6%98%AF%E7%AE%97%E6%B3%95%EF%BC%9F/</url>
      <content type="html"><![CDATA[<!-- <font size=4></font> -->
<h1 id="定义">定义</h1>
<ul>
<li><p><font size="5"><strong>算法（Algorithm）</strong></font></p>
<p><font size="4">算法是<strong>解决问题的步骤</strong>，是指解决问题的方案<strong>准确且完整的描述</strong>，是一系列解决问题的清晰指令，算法代表着用系统的方法描述解决问题的策略机制。</font></p>
<p><font size="4"><strong>算法<span class="math inline">\(+\)</span>数据结构<span class="math inline">\(=\)</span>应用程序</strong></font></p></li>
<li><p><font size="5"><strong>算法的特征：</strong></font>
<font size="4"></font></p>
<ul>
<li><strong>可行性</strong>
<ul>
<li>一个有限指令集</li>
<li>算法中执行的任何计算步骤都是可以被分解为基本可执行的操作步，即每个计算步都可以在有限的时间内完成（也称有效性）</li>
</ul></li>
<li><strong>输入项</strong>
<ul>
<li>接受一些输入（有些情况下不需要输入）</li>
<li>一个算法有0个或多个输入，以刻画运算对象的初始情况，所谓0个输入是指算法本身定出的初始条件</li>
</ul></li>
<li><strong>输出项</strong>
<ul>
<li>产生输出</li>
<li>一个算法有一个或多个输出，以反映对输入数据加工后的结果，<del>没有输出的算法是毫无意义的</del></li>
</ul></li>
<li><strong>有穷性</strong>
<ul>
<li>一定在有限步骤之后终止</li>
<li>一个算法必须总是在执行有限的步骤后结束，且每一步都必须在有限的时间内完成</li>
</ul></li>
<li><strong>确切性</strong>
<ul>
<li>每一条指令必须：
<ul>
<li>有充分明确的目标，不可以有歧义</li>
<li>计算机能处理的范围之内</li>
<li>描述不应该依赖于任何一种计算机语言以及具体的实现手段</li>
</ul></li>
<li>算法的每一步必须有确切的定义</li>
</ul></li>
</ul></li>
</ul>
<blockquote>
<p>一个算法是由控制结构（顺序、分支和循环）和原操作（指固有数据类型的操作）构成的，则算法时间取决于两者的综合效果。为了比较同一个问题的不同算法，通常的做法：从算法中选取一种对于研究的问题(或算法类型)来说是基本操作的原操作,以该操作的重复执行的次术作为算法的时间量度。
</p>
</blockquote>
<h1 id="什么是好的算法">什么是好的算法?</h1>
<p><font size="4">虽然计算机能快速的完成运算处理，但实际上，它也需要根据输入数据的大小和算法效率来消耗一定的处理器资源。要想编写出能高效运行的程序，我们就需要考虑到算法的效率。</font></p>
<ul>
<li><font size="5">算法的效率主要由以下两个复杂度来评估</font>
<ul>
<li><font size="4">时间复杂度<span class="math inline">\(T(n)\)</span></font>
<ul>
<li>根据算法写成的程序在执行的时候<strong>耗费时间的长度</strong>。这个长度往往也与输入数据的规模有关。时间复杂度过高的低效可能导致我们有生之年都等不到运行结果。</li>
</ul></li>
<li><font size="4">空间复杂度<span class="math inline">\(S(n)\)</span></font>
<ul>
<li>根据算法写成的程序在执行的时候<strong>占用存储单元的长度</strong>。这个长度往往与输入数据的规模有关。空间复杂度过高的算法可能导致使用的内存超限,造成程序非正常中断。</li>
</ul></li>
</ul>
<hr></li>
<li><font size="4">在分析一般算法的效率时,我们经常关注下面两种复杂度</font>
<ul>
<li><font size="4">最坏情况复杂度<span class="math inline">\(T_w(n)\)</span></font></li>
<li><font size="4">平均复杂度<span class="math inline">\(T_a(n)\)</span></font></li>
</ul>
<font size="4">
<center>
<span class="math inline">\(T_a(n)\leq T_w(n)\)</span>
</center>
</font></li>
</ul>
<blockquote>
<p>设计算法时,一般要先考虑系统环境,然后权衡时间复杂度和空间复杂度,选取一个平衡点。不过,时间复杂度比空间复杂度更容易产生问题,因为算法研究的主要也是时间复杂度,不特别说明的情况下,复杂度就是指时间复杂度。</p>
</blockquote>
<h1 id="时间复杂度">时间复杂度</h1>
<ul>
<li><p><font size="4"><strong>时间频度</strong></font></p>
<p>一个算法执行所耗费的时间，从理论上是不能算出来的，必须上机运行测试才能知道。但我们不可能也没有必要对每个算法都上机测试，只需知道哪个算法花费的时间多，哪个算法花费的时间少就可以了。并且一个算法花费的时间与算法中语句的执行次数成正比例，哪个算法中语句执行次数多，它花费时间就多。<strong>一个算法中的语句执行次数称为语句频度或时间频度</strong>。记为<span class="math inline">\(T(n)\)</span>。</p></li>
<li><p><font size="4"><strong>时间复杂度</strong></font></p>
<p>在刚才提到的时间频度中，<span class="math inline">\(n\)</span>称为问题的规模，当<span class="math inline">\(n\)</span>不断变化时，时间频度<span class="math inline">\(T(n)\)</span>也会不断变化。但有时我们想知道它变化时呈现什么规律。为此，我们引入时间复杂度概念。
一般情况下，算法中基本操作重复执行的次数是问题规模<span class="math inline">\(n\)</span>的某个函数，用<span class="math inline">\(T(n)\)</span>表示，若有某个辅助函数<span class="math inline">\(f(n)\)</span>,使得当<span class="math inline">\(n\)</span>趋近于无穷大时，<span class="math inline">\(T(n)/f(n)\)</span>的极限值为不等于零的常数，则称<span class="math inline">\(f(n)\)</span>是<span class="math inline">\(T(n)\)</span>的同数量级函数。记作<span class="math inline">\(T(n)=O(f(n))\)</span>，称<span class="math inline">\(O(f(n))\)</span>
为算法的<strong>渐进时间复杂度</strong>，简称<strong>时间复杂度</strong>。</p></li>
</ul>
<p>在计算算法复杂度时，一般只用到大<span class="math inline">\(O\)</span>符号。</p>
<p>计算时间复杂度的时候，一般都是取尽可能简单的函数。例如：<span class="math inline">\(O(2n^2+n +1)\)</span> <span class="math inline">\(=\)</span> <span class="math inline">\(O
(3n^2+n+3)\)</span> <span class="math inline">\(=\)</span> <span class="math inline">\(O (7n^2+n)\)</span> <span class="math inline">\(=\)</span> <span class="math inline">\(O(n^2)\)</span>,一般只用<span class="math inline">\(O(n^2)\)</span>表示就可以了。</p>
<p>注意到大<span class="math inline">\(O\)</span>符号里隐藏着一个常数<span class="math inline">\(C\)</span>，所以<span class="math inline">\(f(n)\)</span>里一般不加系数。如果把<span class="math inline">\(T(n)\)</span>当做一棵树，那么<span class="math inline">\(O(f(n))\)</span>所表达的就是树干，只关心其中的主干，其他的细枝末节全都抛弃不管。</p>
<p>在各种不同算法中，<strong>若算法中语句执行次数为一个常数，则时间复杂度为<span class="math inline">\(O(1)\)</span></strong>。另外，在时间频度不相同时，时间复杂度有可能相同，如<span class="math inline">\(T(n)=n^2+3n+4\)</span>与<span class="math inline">\(T(n)=4n^2+2n+1\)</span>它们的频度不同，但时间复杂度相同，都为<span class="math inline">\(O(n^2)\)</span>。</p>
<p><font size="4"><strong>按数量级递增排列，常见的时间复杂度有：</strong></font></p>
<ul>
<li><p>常数阶<span class="math inline">\(O(1)\)</span></p></li>
<li><p>对数阶<span class="math inline">\(O(log_2n)\)</span></p></li>
<li><p>线性阶<span class="math inline">\(O(n)\)</span></p></li>
<li><p>线性对数阶<span class="math inline">\(O(nlog_2n)\)</span></p></li>
<li><p>平方阶<span class="math inline">\(O(n^2)\)</span></p></li>
<li><p>立方阶<span class="math inline">\(O(n^3)\)</span></p>
<p>...</p></li>
<li><p>k次方阶<span class="math inline">\(O(n^k)\)</span></p></li>
<li><p>指数阶<span class="math inline">\(O(2^n)\)</span></p></li>
<li><p>阶乘阶<span class="math inline">\(O(n!)\)</span></p></li>
</ul>
<p>随着问题规模<span class="math inline">\(n\)</span>的不断增大，上述时间复杂度不断增大，算法的执行效率越低。</p>
<ul>
<li><font size="4"><strong>时间复杂度的增长趋势</strong></font> <img src="/.com//../../img/posts_img/什么是算法/时间复杂度.png"></li>
</ul>
<font>
<center>
由此图可见，我们应该尽可能选用多项式阶<span class="math inline">\(O(n^k)\)</span>甚至更优<span class="math inline">\(O(nlog_2n)\)</span>的算法，而不希望用指数阶的算法
</center>
<p></p></font><p></p>
<ul>
<li><p><font size="4"><strong>复杂度的比较</strong></font></p>
<table>
<colgroup>
<col style="width: 10%">
<col style="width: 10%">
<col style="width: 16%">
<col style="width: 11%">
<col style="width: 15%">
<col style="width: 13%">
<col style="width: 22%">
</colgroup>
<thead>
<tr class="header">
<th><span class="math inline">\(n\)</span></th>
<th><span class="math inline">\(logn\)</span></th>
<th><span class="math inline">\(\sqrt{n}\)</span></th>
<th><span class="math inline">\(nlogn\)</span></th>
<th><span class="math inline">\(n^2\)</span></th>
<th><span class="math inline">\(2^n\)</span></th>
<th><span class="math inline">\(n!\)</span></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><span class="math inline">\(5\)</span></td>
<td><span class="math inline">\(2\)</span></td>
<td><span class="math inline">\(2\)</span></td>
<td><span class="math inline">\(10\)</span></td>
<td><span class="math inline">\(25\)</span></td>
<td><span class="math inline">\(32\)</span></td>
<td><span class="math inline">\(120\)</span></td>
</tr>
<tr class="even">
<td><span class="math inline">\(10\)</span></td>
<td><span class="math inline">\(3\)</span></td>
<td><span class="math inline">\(3\)</span></td>
<td><span class="math inline">\(30\)</span></td>
<td><span class="math inline">\(100\)</span></td>
<td><span class="math inline">\(1024\)</span></td>
<td><span class="math inline">\(3628800\)</span></td>
</tr>
<tr class="odd">
<td><span class="math inline">\(50\)</span></td>
<td><span class="math inline">\(5\)</span></td>
<td><span class="math inline">\(7\)</span></td>
<td><span class="math inline">\(250\)</span></td>
<td><span class="math inline">\(2500\)</span></td>
<td><span class="math inline">\(10^{15}\)</span></td>
<td><span class="math inline">\(3.0*10^{64}\)</span></td>
</tr>
<tr class="even">
<td><span class="math inline">\(100\)</span></td>
<td><span class="math inline">\(6\)</span></td>
<td><span class="math inline">\(10\)</span></td>
<td><span class="math inline">\(600\)</span></td>
<td><span class="math inline">\(10000\)</span></td>
<td><span class="math inline">\(10^{30}\)</span></td>
<td><span class="math inline">\(9.3*10^{157}\)</span></td>
</tr>
<tr class="odd">
<td><span class="math inline">\(1000\)</span></td>
<td><span class="math inline">\(9\)</span></td>
<td><span class="math inline">\(31\)</span></td>
<td><span class="math inline">\(9000\)</span></td>
<td><span class="math inline">\(1000000\)</span></td>
<td><span class="math inline">\(10^{300}\)</span></td>
<td><span class="math inline">\(4.0*10^{2567}\)</span></td>
</tr>
</tbody>
</table></li>
</ul>
<p><strong>常见的算法时间复杂度由小到大依次为</strong>：<span class="math inline">\(Ο(1)＜Ο(log_2n)＜Ο(n)＜Ο(nlog_2n)＜Ο(n^2)＜Ο(n^3)＜…＜Ο(2^n)＜Ο(n!)\)</span></p>
<blockquote>
<p>一般情况下，对一个问题（或一类算法）只需选择一种基本操作来讨论算法的时间复杂度即可，有时也需要同时考虑几种基本操作，甚至可以对不同的操作赋予不同的权值，以反映执行不同操作所需的相对时间，这种做法便于综合比较解决同一问题的两种完全不同的算法。</p>
</blockquote>
<ul>
<li><font size="4"><strong>分析算法的时间复杂度</strong></font>
<ul>
<li>若两段算法分别有复杂度<span class="math inline">\(T_1(n)=O(f_1(n))和T_2(n)=O(f_2(n))\)</span>，则
<ul>
<li><span class="math inline">\(T_1(n)+T_2(n)=max(O(f_1(n)),O(f_2(n)))\)</span></li>
<li><span class="math inline">\(T_1(n)*T_2(n)=O(f_1(n)*f_2(n))\)</span></li>
</ul></li>
<li>若<span class="math inline">\(T(n)\)</span>是关于<span class="math inline">\(n\)</span>的<span class="math inline">\(k\)</span>阶多项式，那么<span class="math inline">\(T(n)=O(n^k)\)</span></li>
<li>一个<span class="math inline">\(for\)</span>循环的时间复杂度等于循环次数<span class="math inline">\(*\)</span>循环体代码的复杂度</li>
<li><span class="math inline">\(if-else\)</span>结构的复杂度取决于<span class="math inline">\(if\)</span>的条件判断复杂度和两个分支部分的复杂度，总体复杂度取三者中最大</li>
</ul></li>
</ul>
<h1 id="空间复杂度">空间复杂度</h1>
<ul>
<li><font size="4"><strong>空间复杂度</strong><span class="math inline">\((Space Complexity)\)</span></font>
<ul>
<li>类似于时间复杂度的讨论，一个算法的空间复杂度<span class="math inline">\((Space
Complexity)S(n)\)</span>定义为该算法所耗费的存储空间，它也是问题规模<span class="math inline">\(n\)</span>的函数。<strong>渐近空间复杂度</strong>也常常简称为<strong>空间复杂度</strong>。</li>
<li><strong>空间复杂度</strong>是对一个算法在运行过程中临时占用存储空间大小的量度。一个算法在计算机存储器上所占用的存储空间，包括<strong>存储算法本身所占用的存储空间</strong>，<strong>算法的输入输出数据所占用的存储空间</strong>和<strong>算法在运行过程中临时占用的存储空间</strong>这三个方面。算法的输入输出数据所占用的存储空间是由要解决的问题决定的，是通过参数表由调用函数传递而来的，它不随本算法的不同而改变。存储算法本身所占用的存储空间与算法书写的长短成正比，要压缩这方面的存储空间，就必须编写出较短的算法。算法在运行过程中临时占用的存储空间随算法的不同而异，有的算法只需要占用少量的临时工作单元，而且不随问题规模的大小而改变，我们称这种算法是“就地"进行的，是节省存储的算法。有的算法需要占用的临时工作单元数与解决问题的规模<span class="math inline">\(n\)</span>有关，它随着<span class="math inline">\(n\)</span>的增大而增大，当<span class="math inline">\(n\)</span>较大时，将占用较多的存储单元。</li>
</ul>
<hr></li>
<li>当一个算法的空间复杂度为一个常量，即不随被处理数据量<span class="math inline">\(n\)</span>的大小而改变时，可表示为<span class="math inline">\(O(1)\)</span></li>
<li>当一个算法的空间复杂度与以<span class="math inline">\(2\)</span>为底的<span class="math inline">\(n\)</span>的对数成正比时，可表示为<span class="math inline">\(O(log_2n)\)</span></li>
<li>当一个算法的空间复杂度与<span class="math inline">\(n\)</span>成线性比例关系时，可表示为<span class="math inline">\(O(n)\)</span></li>
<li>若形参为数组，则只需要为它分配一个存储由实参传送来的一个地址指针的空间，即一个机器字长空间</li>
<li>若形参为引用方式，则也只需要为其分配存储一个地址的空间，用它来存储对应实参变量的地址，以便由系统自动引用实参变量</li>
</ul>
<h1 id="常用的排序算法的时间复杂度和空间复杂度">常用的排序算法的时间复杂度和空间复杂度</h1>
<p><img src="/.com//../../img/posts_img/什么是算法/各种常用排序算法.jpg"></p>
<p>参考链接</p>
<ul>
<li><a href="https://blog.csdn.net/zolalad/article/details/11848739?spm">算法的时间复杂度和空间复杂度-总结</a></li>
<li><a href="https://liuwangshu.blog.csdn.net/article/details/54882603?spm">算法（一）时间复杂度</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 算法杂谈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[什么是数据结构？]]></title>
      <url>/articles/%E4%BB%80%E4%B9%88%E6%98%AF%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9F/</url>
      <content type="html"><![CDATA[<!-- <font size=4> </font> -->
<h1 id="所以什么是数据结构">所以什么是数据结构？</h1>
<p><font size="4">数据结构是计算机存储，组织数据的方式。</font></p>
<p><font size="4">数据结构是指相互之间存在一种或多种特定关系的数据元素的集合。通常情况下，精心选择的数据结构可以带来更高的运算或存储效率。</font></p>
<p><font size="4">数据结构往往同高效的检索算法和索引技术有关。</font></p>
<ul>
<li><font size="4"><strong>数据对象</strong>在计算机中的组织方式</font>
<ul>
<li>逻辑结构</li>
<li>物理存储结构</li>
</ul></li>
<li><font size="4">数据对象必定与一系列加在其上的<strong>操作</strong>相关联</font></li>
<li><font size="4">完成这些操作所用的方法就是<strong>算法</strong></font></li>
</ul>
<h1 id="数据类型data-type">数据类型（Data Type）</h1>
<p><font size="4">数据类型在数据结构中的定义是<strong>一组性质相同的值的集合</strong>，以及定义在这个值集合上的一组操作的总称</font></p>
<h1 id="抽象数据类型abstract-data-type">抽象数据类型（Abstract Data
Type）</h1>
<ul>
<li><font size="4">数据类型</font>
<ul>
<li>数据对象集</li>
<li>数据集合相关联的操作集</li>
</ul></li>
<li><font size="4">抽象: 描述数据类型的方法不依赖于具体实现</font>
<ul>
<li>与存放数据的机器无关</li>
<li>与数据存储的物理结构无关</li>
<li>与实现操作的算法和编程语言均无关 &gt;只描述 数据对象集 和 相关操作集
"<strong>是什么</strong>",并不涉及"<strong>如何做到</strong>"的问题</li>
</ul></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[并查集]]></title>
      <url>/articles/%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
      <content type="html"><![CDATA[<blockquote>
<p><font size="3">并查集，在一些有N个元素的集合应用问题中，我们通常是在<strong>开始时让每个元素构成一个单元素的集合</strong>，然后按一定顺序将属于同一组的元素所在的集合合并，其间要反复查找一个元素在哪个集合中。</font></p>
</blockquote>
<h2 id="并查集最常用的两种操作">并查集最常用的两种操作</h2>
<pre><code>- 合并（Union）:把两个不相交的集合合并为一个集合
- 查询（Find）：查询两个元素是否在同一个集合中</code></pre>
<p><font size="4">下面我们通过一道模板题来讲解<strong>并查集</strong>的用法</font></p>
<blockquote>
<p><font size="3"><a href="https://www.luogu.com.cn/problem/P1551">（洛谷P1551）亲戚</a></font>
题目背景
若某个家族人员过于庞大，要判断两个是否是亲戚，确实还很不容易，现在给出某个亲戚关系图，求任意给出的两个人是否具有亲戚关系。
题目描述
规定：x和y是亲戚，y和z是亲戚，那么x和z也是亲戚。如果x,y是亲戚，那么x的亲戚都是y的亲戚，y的亲戚也都是x的亲戚。
输入格式
第一行：三个整数n,m,p，（n&lt;=5000,m&lt;=5000,p&lt;=5000），分别表示有n个人，m个亲戚关系，询问p对亲戚关系。
以下m行：每行两个数Mi，Mj，1&lt;=Mi，Mj&lt;=N，表示Mi和Mj具有亲戚关系。
接下来p行：每行两个数Pi，Pj，询问Pi和Pj是否具有亲戚关系。 输出格式
P行，每行一个’Yes’或’No’。表示第i个询问的答案为“具有”或“不具有”亲戚关系。</p>
</blockquote>
<ul>
<li><p>样例输入 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">6 5 3</span><br><span class="line">1 2</span><br><span class="line">1 5</span><br><span class="line">3 4</span><br><span class="line">5 2</span><br><span class="line">1 3</span><br><span class="line">1 4</span><br><span class="line">2 3</span><br><span class="line">5 6</span><br></pre></td></tr></table></figure></p></li>
<li><p>样例输出 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Yes</span><br><span class="line">Yes</span><br><span class="line">No</span><br></pre></td></tr></table></figure></p></li>
</ul>
<h2 id="并查集初始化">并查集初始化</h2>
<p><font size="4">并查集初始化的重要思想在于，用<strong>集合中的一个元素代表集合</strong></font></p>
<p><font size="3">并查集初始化，将每个元素的父亲节点设为自己：</font></p>
<p><img src="/.com//../../img/posts_img/并查集/初始状态.jpg"></p>
<ul>
<li><font size="3">初始状态</font> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)&#123;</span><br><span class="line">    t[i] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <font size="3">或者</font>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)&#123;   <span class="comment">//结构体实现</span></span><br><span class="line">    t[i].date = i;          <span class="comment">//该集合的数据</span></span><br><span class="line">    t[i].rank = <span class="number">0</span>;          <span class="comment">//该集合的秩</span></span><br><span class="line">    t[i].parent = i;   <span class="comment">//该集合的父亲节点   </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="合并操作">合并操作</h2>
<p><font size="4">接下来就是喜闻乐见的合并操作了</font>
&gt;tips：在普通的集合合并中，谁当老大（父亲节点）并不重要，只需要有一个元素能够代表整个集合就可以了</p>
<ul>
<li><p><font size="3">1、3合并:</font> <img src="/.com//../../img/posts_img/并查集/1、3合并.jpg"></p></li>
<li><p><font size="3">1、2或者2、3合并:</font> <img src="/.com//../../img/posts_img/并查集/1、2或者2、3合并.jpg"></p></li>
<li><p><font size="3">4、5、6合并:</font> <img src="/.com//../../img/posts_img/并查集/4、5、6合并.jpg"></p></li>
<li><p><font size="3">1、4合并:</font> <img src="/.com//../../img/posts_img/并查集/1、4合并.jpg"></p></li>
<li><p><font size="3">树状结构:</font> <img src="/.com//../../img/posts_img/并查集/树状结构.jpg"></p></li>
</ul>
<p><font size="4">这样的结构里面，我们要<strong>寻找一个集合的代表元素（父亲节点），只需要通过集合中任意一个元素，然后一层一层往上访问父节点，直达树的根节点（橙色的圆）即可</strong>。根节点的父节点就是他自己。<del>（我的老大是我自己）</del></font></p>
<p><font size="3">通过这种方法我们可以实现代码（最简单的并查集代码）:</font>
- <font size="3">查询:</font> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Find_Set</span><span class="params">(ll x)</span></span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(t[x]!=x)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Find_Set</span>(t[x]);     </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <font size="3">或者</font>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Find_Set</span><span class="params">(USFTree t[],<span class="type">int</span> x)</span></span>&#123;    <span class="comment">//结构体实现</span></span><br><span class="line">    <span class="keyword">if</span>(t[x].parent != x)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Find_Set</span>(t,t[x].parent);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<font size="3"><strong>用递归的的方法查询代表元素（父亲节点），要判断两个元素是否属于同一个集合，看他们的父亲节点是否同一个即可</strong>:</font></p>
<ul>
<li>合并: <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Union_Set</span><span class="params">(ll x,ll y)</span></span>&#123;</span><br><span class="line">    x = <span class="built_in">Find_Set</span>(x);</span><br><span class="line">    y = <span class="built_in">Find_Set</span>(y);</span><br><span class="line">    t[x] = y;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <font size="3">或者</font> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Union_Set</span><span class="params">(USFTree t[],<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;    <span class="comment">//结构体实现</span></span><br><span class="line">    x = <span class="built_in">Find_Set</span>(t,x);</span><br><span class="line">    y = <span class="built_in">Find_Set</span>(t,y);</span><br><span class="line">    t[x].parent = y;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<font size="3"><strong>合并操作只需要找到两个集合的代表元素（父亲节点），把前者的父亲节点设为后者即可（此方法并不是最优化合理的方法，下文给出更合理的方法）</strong>:</font></li>
</ul>
<h2 id="路径压缩">路径压缩</h2>
<p><font size="3">上面最简单的并查集方法效率是比较低的，比如这个集合:</font></p>
<p><img src="/.com//../../img/posts_img/并查集/路径压缩1.jpg"></p>
<p><font size="3">随着整个链表越来越长，我们查询集合代表元素（父亲节点）就会越来越困难，要做的操作次数越来越多，从而导致效率变低。</font></p>
<p><font size="3">这个时候我们只需要在<strong>查询父节点的时候</strong>让集合的每个元素的父节点都指向集合的祖先节点（代表元素）<strong>大概率就类似菊花图一样的结构</strong></font></p>
<ul>
<li><font size="3">代码实现:</font> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Find_Set</span><span class="params">(ll x)</span></span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(t[x]!=x)&#123;</span><br><span class="line">        <span class="keyword">return</span> t[x] = <span class="built_in">Find_Set</span>(t[x]); <span class="comment">//按祖先结点维护</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <font size="3">或者</font>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Find_Set</span><span class="params">(USFTree t[],<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[x].parent != x)&#123;</span><br><span class="line">        t[x].parent = <span class="built_in">Find_Set</span>(t,t[x].parent)；</span><br><span class="line">        <span class="keyword">return</span> t[x].parent; <span class="comment">//按祖先结点维护、结构体实现</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <font size="3">通常简写一行</font> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Find_Set</span><span class="params">(ll x)</span></span>&#123; </span><br><span class="line">    <span class="keyword">return</span> t[x]==x ? x : (t[x]=<span class="built_in">Find_Set</span>(t[x]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
&gt;<font size="3">要注意赋值运算符：“=” 的优先级没有三元运算符："?"
高，所以这里要加括号</font></li>
</ul>
<p><font size="3">为什么要用三元运算符而不用 if 语句?</font> <img src="/.com//../../img/posts_img/并查集/三元运算符.png"></p>
<h2 id="按秩合并">按秩合并</h2>
<p><font size="3">由于路径压缩只会在查询操作的时候进行，并且也只是压缩一条路径，所以并查集最终的结构可能还是会很复杂</font></p>
<p><font size="3"><strong>例:</strong></font></p>
<blockquote>
<p><font size="3">我现在有两个集合，一个高度比较矮，一个高度比较高，我需要将他们合并</font></p>
</blockquote>
<ul>
<li>合并前: <img src="/.com//../../img/posts_img/并查集/合并前.jpg"></li>
<li>合并后: <img src="/.com//../../img/posts_img/并查集/合并后.jpg"></li>
</ul>
<span id="more"></span>
<p><font size="3"><strong>很明显，左边的集合树的高度明显比右边的高，进行查询操作的时候效率肯定会更慢一些</strong></font></p>
<p><font size="3"><strong>因此，得出结论，我们应该把简单的树往复杂的树上合并，而并不是相反，这样我们查询集合元素的父亲节点时访问的层数可以更少而不是更多</strong></font></p>
<p><font size="3"><strong>用一个 rank[]
数组记录每个集合的秩（树的高度），开始先将所有集合的秩初始化为1，就跟初始化并查集一样。合并的时候比较两个集合的秩，将rank较小的往rank较大的身上合并</strong></font></p>
<ul>
<li>代码实现: <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Union_Set</span><span class="params">(ll x,ll y)</span></span>&#123;</span><br><span class="line">    x = <span class="built_in">Find_Set</span>(x);</span><br><span class="line">    y = <span class="built_in">Find_Set</span>(y);</span><br><span class="line">    <span class="keyword">if</span>(x==y)&#123;</span><br><span class="line">        <span class="keyword">return</span>; <span class="comment">// 如果两个元素的祖先节点相同，说明在同一个集合中</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(rankSiz[x]&gt;rankSiz[y])&#123; <span class="comment">//按秩维护</span></span><br><span class="line">        <span class="built_in">swap</span>(x,y); <span class="comment">// 默认x元素的rank比y元素的rank小反之则交换x与y</span></span><br><span class="line">    &#125;</span><br><span class="line">    t[x] = y;</span><br><span class="line">    rankSiz[y] += rankSiz[x];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <font size="3">或者</font>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Union_Set</span><span class="params">(USFTree t[],<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;    <span class="comment">//结构体实现</span></span><br><span class="line">    x = <span class="built_in">Find_Set</span>(t,x);</span><br><span class="line">    y = <span class="built_in">Find_Set</span>(t,y);</span><br><span class="line">    <span class="keyword">if</span>(x==y) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(t[x].rank&gt;=t[y].rank)&#123;</span><br><span class="line">        t[y].parent = x;</span><br><span class="line">        t[x].rank++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        t[x].parent = y;</span><br><span class="line">        t[y].rank++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<!-- more -->
<h2 id="洛谷p1551亲戚ac代码">（洛谷P1551）亲戚AC代码</h2>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll n,m,p,x,y;</span><br><span class="line">ll t[<span class="number">20000</span>],rankSiz[<span class="number">20000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Find_Set</span><span class="params">(ll x)</span></span>&#123; </span><br><span class="line">    <span class="keyword">return</span> t[x]==x ? x : (t[x]=<span class="built_in">Find_Set</span>(t[x]));</span><br><span class="line">    <span class="comment">// if(t[x]!=x)&#123;</span></span><br><span class="line">    <span class="comment">//     return t[x] = Find_Set(t[x]); //按祖先结点维护</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// else&#123;</span></span><br><span class="line">    <span class="comment">//     return x;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Uniom_Set</span><span class="params">(ll x,ll y)</span></span>&#123;</span><br><span class="line">    x = <span class="built_in">Find_Set</span>(x);</span><br><span class="line">    y = <span class="built_in">Find_Set</span>(y);</span><br><span class="line">    <span class="keyword">if</span>(x==y)&#123;</span><br><span class="line">        <span class="keyword">return</span>; <span class="comment">// 如果两个元素的祖先节点相同，说明在同一个集合中</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(rankSiz[x]&gt;rankSiz[y])&#123; <span class="comment">//按秩维护</span></span><br><span class="line">        <span class="built_in">swap</span>(x,y); <span class="comment">// 默认x元素的rank比y元素的rank小反之则交换x与y</span></span><br><span class="line">    &#125;</span><br><span class="line">    t[x] = y;</span><br><span class="line">    rankSiz[y] += rankSiz[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; p;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)&#123;</span><br><span class="line">        t[i] = i;</span><br><span class="line">        rankSiz[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= m;++i)&#123;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="built_in">Uniom_Set</span>(x,y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= p;++i)&#123;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="built_in">Find_Set</span>(x)==<span class="built_in">Find_Set</span>(y) ? cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl : cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><font size="5" color="orange"><strong>凡是涉及到元素的分组管理问题，都可以考虑使用并查集进行维护！</strong></font></p>
<p>参考链接</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/93647900">算法学习笔记(1) :
并查集</a></li>
<li><a href="https://blog.csdn.net/dby73/article/details/103206805">if语句和三元运算符哪个效率更高</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 算法杂谈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
