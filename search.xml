<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[test]]></title>
      <url>/articles/d87f7e0c/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[并查集]]></title>
      <url>/articles/%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
      <content type="html"><![CDATA[<blockquote>
<p><font size="3">并查集，在一些有N个元素的集合应用问题中，我们通常是在<strong>开始时让每个元素构成一个单元素的集合</strong>，然后按一定顺序将属于同一组的元素所在的集合合并，其间要反复查找一个元素在哪个集合中。</font></p>
</blockquote>
<h2 id="并查集最常用的两种操作"><a href="#并查集最常用的两种操作" class="headerlink" title="并查集最常用的两种操作"></a>并查集最常用的两种操作</h2><pre><code>- 合并（Union）:把两个不相交的集合合并为一个集合
- 查询（Find）：查询两个元素是否在同一个集合中
</code></pre>
<p><font size="4">下面我们通过一道模板题来讲解<strong>并查集</strong>的用法</font></p>
<blockquote>
<p><font size="3"><a href="https://www.luogu.com.cn/problem/P1551">（洛谷P1551）亲戚</a></font><br>题目背景<br>    若某个家族人员过于庞大，要判断两个是否是亲戚，确实还很不容易，现在给出某个亲戚关系图，求任意给出的两个人是否具有亲戚关系。<br>题目描述<br>    规定：x和y是亲戚，y和z是亲戚，那么x和z也是亲戚。如果x,y是亲戚，那么x的亲戚都是y的亲戚，y的亲戚也都是x的亲戚。<br>输入格式<br>    第一行：三个整数n,m,p，（n&lt;&#x3D;5000,m&lt;&#x3D;5000,p&lt;&#x3D;5000），分别表示有n个人，m个亲戚关系，询问p对亲戚关系。<br>    以下m行：每行两个数Mi，Mj，1&lt;&#x3D;Mi，Mj&lt;&#x3D;N，表示Mi和Mj具有亲戚关系。<br>    接下来p行：每行两个数Pi，Pj，询问Pi和Pj是否具有亲戚关系。<br>输出格式<br>    P行，每行一个’Yes’或’No’。表示第i个询问的答案为“具有”或“不具有”亲戚关系。</p>
</blockquote>
<ul>
<li><p>样例输入</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">6 5 3</span><br><span class="line">1 2</span><br><span class="line">1 5</span><br><span class="line">3 4</span><br><span class="line">5 2</span><br><span class="line">1 3</span><br><span class="line">1 4</span><br><span class="line">2 3</span><br><span class="line">5 6</span><br></pre></td></tr></table></figure>
</li>
<li><p>样例输出</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Yes</span><br><span class="line">Yes</span><br><span class="line">No</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="并查集初始化"><a href="#并查集初始化" class="headerlink" title="并查集初始化"></a>并查集初始化</h2><p><font size="4">并查集初始化的重要思想在于，用<strong>集合中的一个元素代表集合</strong></font></p>
<p><font size="3">并查集初始化，将每个元素的父亲节点设为自己：</font></p>
<p><img src="/.193//../../img/posts_img/%E5%B9%B6%E6%9F%A5%E9%9B%86/%E5%88%9D%E5%A7%8B%E7%8A%B6%E6%80%81.jpg"></p>
<ul>
<li><font size="3">初始状态</font><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)&#123;</span><br><span class="line">    t[i] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<font size="3">或者</font><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)&#123;   <span class="comment">//结构体实现</span></span><br><span class="line">    t[i].date = i;          <span class="comment">//该集合的数据</span></span><br><span class="line">    t[i].rank = <span class="number">0</span>;          <span class="comment">//该集合的秩</span></span><br><span class="line">    t[i].parent = i;   <span class="comment">//该集合的父亲节点   </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="合并操作"><a href="#合并操作" class="headerlink" title="合并操作"></a>合并操作</h2><p><font size="4">接下来就是喜闻乐见的合并操作了</font></p>
<blockquote>
<p>tips：在普通的集合合并中，谁当老大（父亲节点）并不重要，只需要有一个元素能够代表整个集合就可以了</p>
</blockquote>
<ul>
<li><p><font size="3">1、3合并:</font><br><img src="/.193//../../img/posts_img/%E5%B9%B6%E6%9F%A5%E9%9B%86/1%E3%80%813%E5%90%88%E5%B9%B6.jpg"></p>
</li>
<li><p><font size="3">1、2或者2、3合并:</font><br><img src="/.193//../../img/posts_img/%E5%B9%B6%E6%9F%A5%E9%9B%86/1%E3%80%812%E6%88%96%E8%80%852%E3%80%813%E5%90%88%E5%B9%B6.jpg"></p>
</li>
<li><p><font size="3">4、5、6合并:</font><br><img src="/.193//../../img/posts_img/%E5%B9%B6%E6%9F%A5%E9%9B%86/4%E3%80%815%E3%80%816%E5%90%88%E5%B9%B6.jpg"></p>
</li>
<li><p><font size="3">1、4合并:</font><br><img src="/.193//../../img/posts_img/%E5%B9%B6%E6%9F%A5%E9%9B%86/1%E3%80%814%E5%90%88%E5%B9%B6.jpg"></p>
</li>
<li><p><font size="3">树状结构:</font><br><img src="/.193//../../img/posts_img/%E5%B9%B6%E6%9F%A5%E9%9B%86/%E6%A0%91%E7%8A%B6%E7%BB%93%E6%9E%84.jpg"></p>
</li>
</ul>
<p><font size="4">这样的结构里面，我们要<strong>寻找一个集合的代表元素（父亲节点），只需要通过集合中任意一个元素，然后一层一层往上访问父节点，直达树的根节点（橙色的圆）即可</strong>。根节点的父节点就是他自己。<del>（我的老大是我自己）</del></font></p>
<p><font size="3">通过这种方法我们可以实现代码（最简单的并查集代码）:</font></p>
<ul>
<li><p><font size="3">查询:</font></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Find_Set</span><span class="params">(ll x)</span></span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(t[x]!=x)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Find_Set</span>(t[x]);     </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><font size="3">或者</font></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Find_Set</span><span class="params">(USFTree t[],<span class="type">int</span> x)</span></span>&#123;    <span class="comment">//结构体实现</span></span><br><span class="line">    <span class="keyword">if</span>(t[x].parent != x)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Find_Set</span>(t,t[x].parent);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><font size="3"><strong>用递归的的方法查询代表元素（父亲节点），要判断两个元素是否属于同一个集合，看他们的父亲节点是否同一个即可</strong>:</font></p>
</li>
<li><p>合并:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Union_Set</span><span class="params">(ll x,ll y)</span></span>&#123;</span><br><span class="line">    x = <span class="built_in">Find_Set</span>(x);</span><br><span class="line">    y = <span class="built_in">Find_Set</span>(y);</span><br><span class="line">    t[x] = y;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><font size="3">或者</font></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Union_Set</span><span class="params">(USFTree t[],<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;    <span class="comment">//结构体实现</span></span><br><span class="line">    x = <span class="built_in">Find_Set</span>(t,x);</span><br><span class="line">    y = <span class="built_in">Find_Set</span>(t,y);</span><br><span class="line">    t[x].parent = y;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><font size="3"><strong>合并操作只需要找到两个集合的代表元素（父亲节点），把前者的父亲节点设为后者即可（此方法并不是最优化合理的方法，下文给出更合理的方法）</strong>:</font></p>
</li>
</ul>
<h2 id="路径压缩"><a href="#路径压缩" class="headerlink" title="路径压缩"></a>路径压缩</h2><p><font size="3">上面最简单的并查集方法效率是比较低的，比如这个集合:</font></p>
<p><img src="/.193//../../img/posts_img/%E5%B9%B6%E6%9F%A5%E9%9B%86/%E8%B7%AF%E5%BE%84%E5%8E%8B%E7%BC%A91.jpg"></p>
<p><font size="3">随着整个链表越来越长，我们查询集合代表元素（父亲节点）就会越来越困难，要做的操作次数越来越多，从而导致效率变低。</font></p>
<p><font size="3">这个时候我们只需要在<strong>查询父节点的时候</strong>让集合的每个元素的父节点都指向集合的祖先节点（代表元素）<strong>大概率就类似菊花图一样的结构</strong></font>	</p>
<ul>
<li><font size="3">代码实现:</font>	<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Find_Set</span><span class="params">(ll x)</span></span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(t[x]!=x)&#123;</span><br><span class="line">        <span class="keyword">return</span> t[x] = <span class="built_in">Find_Set</span>(t[x]); <span class="comment">//按祖先结点维护</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<font size="3">或者</font><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Find_Set</span><span class="params">(USFTree t[],<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t[x].parent != x)&#123;</span><br><span class="line">        t[x].parent = <span class="built_in">Find_Set</span>(t,t[x].parent)；</span><br><span class="line">        <span class="keyword">return</span> t[x].parent; <span class="comment">//按祖先结点维护、结构体实现</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<font size="3">通常简写一行</font><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Find_Set</span><span class="params">(ll x)</span></span>&#123; </span><br><span class="line">    <span class="keyword">return</span> t[x]==x ? x : (t[x]=<span class="built_in">Find_Set</span>(t[x]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><font size="3">要注意赋值运算符：“&#x3D;” 的优先级没有三元运算符：”?” 高，所以这里要加括号</font></p>
</blockquote>
</li>
</ul>
<p><font size="3">为什么要用三元运算符而不用 if 语句?</font><br><img src="/.193//../../img/posts_img/%E5%B9%B6%E6%9F%A5%E9%9B%86/%E4%B8%89%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6.png"></p>
<h2 id="按秩合并"><a href="#按秩合并" class="headerlink" title="按秩合并"></a>按秩合并</h2><p><font size="3">由于路径压缩只会在查询操作的时候进行，并且也只是压缩一条路径，所以并查集最终的结构可能还是会很复杂</font></p>
<p><font size="3">例:</font></p>
<blockquote>
<p><font size="3">我现在有两个集合，一个高度比较矮，一个高度比较高，我需要将他们合并</font></p>
</blockquote>
<ul>
<li>合并前:<br><img src="/.193//../../img/posts_img/%E5%B9%B6%E6%9F%A5%E9%9B%86/%E5%90%88%E5%B9%B6%E5%89%8D.jpg"></li>
<li>合并后:<br><img src="/.193//../../img/posts_img/%E5%B9%B6%E6%9F%A5%E9%9B%86/%E5%90%88%E5%B9%B6%E5%90%8E.jpg"></li>
</ul>
<span id="more"></span>

<p><font size="3"><strong>很明显，左边的集合树的高度明显比右边的高，进行查询操作的时候效率肯定会更慢一些</strong></font></p>
<p><font size="3"><strong>因此，得出结论，我们应该把简单的树往复杂的树上合并，而并不是相反，这样我们查询集合元素的父亲节点时访问的层数可以更少而不是更多</strong></font></p>
<p><font size="3"><strong>用一个 rank[] 数组记录每个集合的秩（树的高度），开始先将所有集合的秩初始化为1，就跟初始化并查集一样。合并的时候比较两个集合的秩，将rank较小的往rank较大的身上合并</strong></font></p>
<ul>
<li>代码实现:<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Union_Set</span><span class="params">(ll x,ll y)</span></span>&#123;</span><br><span class="line">    x = <span class="built_in">Find_Set</span>(x);</span><br><span class="line">    y = <span class="built_in">Find_Set</span>(y);</span><br><span class="line">    <span class="keyword">if</span>(x==y)&#123;</span><br><span class="line">        <span class="keyword">return</span>; <span class="comment">// 如果两个元素的祖先节点相同，说明在同一个集合中</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(rankSiz[x]&gt;rankSiz[y])&#123; <span class="comment">//按秩维护</span></span><br><span class="line">        <span class="built_in">swap</span>(x,y); <span class="comment">// 默认x元素的rank比y元素的rank小反之则交换x与y</span></span><br><span class="line">    &#125;</span><br><span class="line">    t[x] = y;</span><br><span class="line">    rankSiz[y] += rankSiz[x];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<font size="3">或者</font><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Union_Set</span><span class="params">(USFTree t[],<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;    <span class="comment">//结构体实现</span></span><br><span class="line">    x = <span class="built_in">Find_Set</span>(t,x);</span><br><span class="line">    y = <span class="built_in">Find_Set</span>(t,y);</span><br><span class="line">    <span class="keyword">if</span>(x==y) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(t[x].rank&gt;=t[y].rank)&#123;</span><br><span class="line">        t[y].parent = x;</span><br><span class="line">        t[x].rank++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        t[x].parent = y;</span><br><span class="line">        t[y].rank++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<!-- more -->



<h2 id="（洛谷P1551）亲戚AC代码"><a href="#（洛谷P1551）亲戚AC代码" class="headerlink" title="（洛谷P1551）亲戚AC代码"></a>（洛谷P1551）亲戚AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll n,m,p,x,y;</span><br><span class="line">ll t[<span class="number">20000</span>],rankSiz[<span class="number">20000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Find_Set</span><span class="params">(ll x)</span></span>&#123; </span><br><span class="line">    <span class="keyword">return</span> t[x]==x ? x : (t[x]=<span class="built_in">Find_Set</span>(t[x]));</span><br><span class="line">    <span class="comment">// if(t[x]!=x)&#123;</span></span><br><span class="line">    <span class="comment">//     return t[x] = Find_Set(t[x]); //按祖先结点维护</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// else&#123;</span></span><br><span class="line">    <span class="comment">//     return x;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Uniom_Set</span><span class="params">(ll x,ll y)</span></span>&#123;</span><br><span class="line">    x = <span class="built_in">Find_Set</span>(x);</span><br><span class="line">    y = <span class="built_in">Find_Set</span>(y);</span><br><span class="line">    <span class="keyword">if</span>(x==y)&#123;</span><br><span class="line">        <span class="keyword">return</span>; <span class="comment">// 如果两个元素的祖先节点相同，说明在同一个集合中</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(rankSiz[x]&gt;rankSiz[y])&#123; <span class="comment">//按秩维护</span></span><br><span class="line">        <span class="built_in">swap</span>(x,y); <span class="comment">// 默认x元素的rank比y元素的rank小反之则交换x与y</span></span><br><span class="line">    &#125;</span><br><span class="line">    t[x] = y;</span><br><span class="line">    rankSiz[y] += rankSiz[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; p;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)&#123;</span><br><span class="line">        t[i] = i;</span><br><span class="line">        rankSiz[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= m;++i)&#123;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="built_in">Uniom_Set</span>(x,y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= p;++i)&#123;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="built_in">Find_Set</span>(x)==<span class="built_in">Find_Set</span>(y) ? cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl : cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font size="5" color="orange"><strong>凡是涉及到元素的分组管理问题，都可以考虑使用并查集进行维护！</strong></font></p>
<p>参考链接</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/93647900">算法学习笔记(1) : 并查集</a></li>
<li><a href="https://blog.csdn.net/dby73/article/details/103206805">if语句和三元运算符哪个效率更高</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 算法杂谈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
